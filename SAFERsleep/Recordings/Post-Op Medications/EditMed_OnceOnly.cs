///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SAFERsleep.Recordings.Post_Op_Medications
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The EditMed_OnceOnly recording.
    /// </summary>
    [TestModule("3eddc6b4-6af5-484c-b923-1618c67be185", ModuleType.Recording, 1)]
    public partial class EditMed_OnceOnly : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SAFERsleep.SAFERsleepORRepository repository.
        /// </summary>
        public static SAFERsleep.SAFERsleepORRepository repo = SAFERsleep.SAFERsleepORRepository.Instance;

        static EditMed_OnceOnly instance = new EditMed_OnceOnly();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public EditMed_OnceOnly()
        {
            Edit_Once_Dose = "";
            Edit_Once_Unit = "";
            Edit_Once_Route = "";
            Once_DrugName = "";
            Edit_Once_DrugName = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static EditMed_OnceOnly Instance
        {
            get { return instance; }
        }

#region Variables

        /// <summary>
        /// Gets or sets the value of variable SpecialInstruction.
        /// </summary>
        [TestVariable("d7984f91-9c97-4c13-b478-6d1f343976b8")]
        public string SpecialInstruction
        {
            get { return repo.SpecialInstruction; }
            set { repo.SpecialInstruction = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Once_Route.
        /// </summary>
        [TestVariable("33d4d775-b4c5-43f1-be30-89c339cba2b8")]
        public string Once_Route
        {
            get { return repo.Once_Route; }
            set { repo.Once_Route = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Once_DoseCalculation.
        /// </summary>
        [TestVariable("c1acfbfb-0901-406e-a479-49cbfb4763d9")]
        public string Once_DoseCalculation
        {
            get { return repo.Once_DoseCalculation; }
            set { repo.Once_DoseCalculation = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Once_Unit.
        /// </summary>
        [TestVariable("75064ebc-1b56-4d5f-8c14-ad7845532a8a")]
        public string Once_Unit
        {
            get { return repo.Once_Unit; }
            set { repo.Once_Unit = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Once_DoseRange.
        /// </summary>
        [TestVariable("451d1f65-c1a8-4ba1-b960-21b755ff644f")]
        public string Once_DoseRange
        {
            get { return repo.Once_DoseRange; }
            set { repo.Once_DoseRange = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Once_Dose.
        /// </summary>
        [TestVariable("1c0a475f-283c-4969-9922-066b2ff19887")]
        public string Once_Dose
        {
            get { return repo.Once_Dose; }
            set { repo.Once_Dose = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Once_DrugName.
        /// </summary>
        [TestVariable("97a68c08-9dcd-4439-a417-9120f4aff305")]
        public string Once_DrugName
        {
            get { return repo.Once_DrugName; }
            set { repo.Once_DrugName = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Edit_Once_Unit.
        /// </summary>
        [TestVariable("08aa9252-7b2a-4640-b086-bbbe7be293c0")]
        public string Edit_Once_Unit
        {
            get { return repo.Edit_Once_Unit; }
            set { repo.Edit_Once_Unit = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Edit_Once_Dose.
        /// </summary>
        [TestVariable("f4c70ab3-4cd7-4dcd-8159-6d293783eb38")]
        public string Edit_Once_Dose
        {
            get { return repo.Edit_Once_Dose; }
            set { repo.Edit_Once_Dose = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Edit_Once_DrugName.
        /// </summary>
        [TestVariable("3c08b7ae-df58-40b0-89b9-8f21870dd54c")]
        public string Edit_Once_DrugName
        {
            get { return repo.Edit_Once_DrugName; }
            set { repo.Edit_Once_DrugName = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Edit_Once_Route.
        /// </summary>
        [TestVariable("5cc68ea0-690f-4c0f-8765-083d91b5e278")]
        public string Edit_Once_Route
        {
            get { return repo.Edit_Once_Route; }
            set { repo.Edit_Once_Route = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            // Click on "OnceOnly" tab
            Report.Log(ReportLevel.Info, "Mouse", "Click on \"OnceOnly\" tab\r\nMouse Left Click item 'FrmORMain.PostOpMedication.Tabs.OnceOnly' at Center.", repo.FrmORMain.PostOpMedication.Tabs.OnceOnlyInfo, new RecordItemIndex(0));
            repo.FrmORMain.PostOpMedication.Tabs.OnceOnly.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmORMain.PostOpMedication.OnceMed.AddedOnceMedication' at Center.", repo.FrmORMain.PostOpMedication.OnceMed.AddedOnceMedicationInfo, new RecordItemIndex(1));
            repo.FrmORMain.PostOpMedication.OnceMed.AddedOnceMedication.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmORMain.PostOpMedication.OnceMed.Edit_Once' at Center.", repo.FrmORMain.PostOpMedication.OnceMed.Edit_OnceInfo, new RecordItemIndex(2));
            repo.FrmORMain.PostOpMedication.OnceMed.Edit_Once.Click();
            
            UserCodeCollection_OR.Clear_TextBox(repo.AddOnceOnlyMedication.DrugNameInfo, "Combobox");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Edit_Once_DrugName'.", new RecordItemIndex(4));
            Keyboard.Press(Edit_Once_DrugName);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Enter' Press.", new RecordItemIndex(5));
            Keyboard.Press(System.Windows.Forms.Keys.Return, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'AddOnceOnlyMedication.Dose' at Center.", repo.AddOnceOnlyMedication.DoseInfo, new RecordItemIndex(6));
            repo.AddOnceOnlyMedication.Dose.DoubleClick();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Edit_Once_Dose'.", new RecordItemIndex(7));
            Keyboard.Press(Edit_Once_Dose);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'AddOnceOnlyMedication.Unit' at Center.", repo.AddOnceOnlyMedication.UnitInfo, new RecordItemIndex(8));
            repo.AddOnceOnlyMedication.Unit.DoubleClick();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Edit_Once_Unit'.", new RecordItemIndex(9));
            Keyboard.Press(Edit_Once_Unit);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'AddOnceOnlyMedication.Route' at Center.", repo.AddOnceOnlyMedication.RouteInfo, new RecordItemIndex(10));
            repo.AddOnceOnlyMedication.Route.DoubleClick();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Edit_Once_Route'.", new RecordItemIndex(11));
            Keyboard.Press(Edit_Once_Route);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'AddOnceOnlyMedication.ButtonOK' at Center.", repo.AddOnceOnlyMedication.ButtonOKInfo, new RecordItemIndex(12));
            repo.AddOnceOnlyMedication.ButtonOK.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'FrmORMain.PostOpMedication.OnceMed.EditedOnceMedication'.", repo.FrmORMain.PostOpMedication.OnceMed.EditedOnceMedicationInfo, new RecordItemIndex(13));
            Validate.Exists(repo.FrmORMain.PostOpMedication.OnceMed.EditedOnceMedicationInfo);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
