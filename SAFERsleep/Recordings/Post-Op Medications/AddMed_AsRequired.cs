///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SAFERsleep.Recordings.Post_Op_Medications
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The AddMed_AsRequired recording.
    /// </summary>
    [TestModule("6d13fbe8-b145-4066-b478-bd63c8dd04c5", ModuleType.Recording, 1)]
    public partial class AddMed_AsRequired : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SAFERsleep.SAFERsleepORRepository repository.
        /// </summary>
        public static SAFERsleep.SAFERsleepORRepository repo = SAFERsleep.SAFERsleepORRepository.Instance;

        static AddMed_AsRequired instance = new AddMed_AsRequired();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public AddMed_AsRequired()
        {
            AsRe_DrugName = "Fentanyl";
            AsRe_Dose = "20";
            AsRe_DoseRange = "10-20";
            AsRe_Unit = "unit";
            AsRe_DoseCalculation = "20mg/kg";
            AsRe_Route = "PO/IV";
            AsRequ_Instruction = "PACU only STAT";
            FreqTime = "4 hrly";
            MaxDose = "50 ";
            Indication = "Pain relief";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static AddMed_AsRequired Instance
        {
            get { return instance; }
        }

#region Variables

        /// <summary>
        /// Gets or sets the value of variable AsRequ_Instruction.
        /// </summary>
        [TestVariable("f3595cd9-d216-4df4-889d-fb434be4c6ea")]
        public string AsRequ_Instruction
        {
            get { return repo.AsRequ_Instruction; }
            set { repo.AsRequ_Instruction = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Indication.
        /// </summary>
        [TestVariable("f6c5e12f-2bb9-479a-a6a1-8234769938ed")]
        public string Indication
        {
            get { return repo.Indication; }
            set { repo.Indication = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable MaxDose.
        /// </summary>
        [TestVariable("4ddd8d63-0e8d-49ee-8f7f-00f00eb7f13d")]
        public string MaxDose
        {
            get { return repo.MaxDose; }
            set { repo.MaxDose = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable AsRe_DoseCalculation.
        /// </summary>
        [TestVariable("1bc416a3-db82-4c2d-910d-ebf1c6c7fe40")]
        public string AsRe_DoseCalculation
        {
            get { return repo.AsRe_DoseCalculation; }
            set { repo.AsRe_DoseCalculation = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable FreqTime.
        /// </summary>
        [TestVariable("5fcd820c-b3e7-48a4-bf2c-a9140485d6fd")]
        public string FreqTime
        {
            get { return repo.FreqTime; }
            set { repo.FreqTime = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable AsRe_Route.
        /// </summary>
        [TestVariable("b36eff8d-a158-4c1b-9ac1-e13a32fef003")]
        public string AsRe_Route
        {
            get { return repo.AsRe_Route; }
            set { repo.AsRe_Route = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable AsRe_Unit.
        /// </summary>
        [TestVariable("3fc2e51e-796f-4af1-9ad4-1d82d83f5a95")]
        public string AsRe_Unit
        {
            get { return repo.AsRe_Unit; }
            set { repo.AsRe_Unit = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable AsRe_DoseRange.
        /// </summary>
        [TestVariable("375b50db-ac95-4de6-b179-341647a15fe2")]
        public string AsRe_DoseRange
        {
            get { return repo.AsRe_DoseRange; }
            set { repo.AsRe_DoseRange = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable AsRe_Dose.
        /// </summary>
        [TestVariable("fe8dd8d2-5eb9-41fc-89ff-3b8deee6573f")]
        public string AsRe_Dose
        {
            get { return repo.AsRe_Dose; }
            set { repo.AsRe_Dose = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable AsRe_DrugName.
        /// </summary>
        [TestVariable("7aa89317-7fe2-4b0e-8cd6-fc7961727cb8")]
        public string AsRe_DrugName
        {
            get { return repo.AsRe_DrugName; }
            set { repo.AsRe_DrugName = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            // Click on "As Required" tab
            Report.Log(ReportLevel.Info, "Mouse", "Click on \"As Required\" tab\r\nMouse Left Click item 'FrmORMain.PostOpMedication.Tabs.AsRequiredPRN' at Center.", repo.FrmORMain.PostOpMedication.Tabs.AsRequiredPRNInfo, new RecordItemIndex(0));
            repo.FrmORMain.PostOpMedication.Tabs.AsRequiredPRN.Click();
            
            // Click on "Add" button
            Report.Log(ReportLevel.Info, "Mouse", "Click on \"Add\" button\r\nMouse Left Click item 'FrmORMain.PostOpMedication.AsReMed.AddMed_AsRequired' at Center.", repo.FrmORMain.PostOpMedication.AsReMed.AddMed_AsRequiredInfo, new RecordItemIndex(1));
            repo.FrmORMain.PostOpMedication.AsReMed.AddMed_AsRequired.Click();
            
            // Verify the right window is opened
            Report.Log(ReportLevel.Info, "Validation", "Verify the right window is opened\r\nValidating Exists on item 'AddAsRequiredPRNMedication.AddAsRequiredPRNMedication'.", repo.AddAsRequiredPRNMedication.AddAsRequiredPRNMedicationInfo, new RecordItemIndex(2));
            Validate.Exists(repo.AddAsRequiredPRNMedication.AddAsRequiredPRNMedicationInfo);
            
            // Enter Drug name
            Report.Log(ReportLevel.Info, "Mouse", "Enter Drug name\r\nMouse Left Click item 'AddAsRequiredPRNMedication.DrugName' at Center.", repo.AddAsRequiredPRNMedication.DrugNameInfo, new RecordItemIndex(3));
            repo.AddAsRequiredPRNMedication.DrugName.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$AsRe_DrugName'.", new RecordItemIndex(4));
            Keyboard.Press(AsRe_DrugName);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(5));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            // Enter Dose
            Report.Log(ReportLevel.Info, "Mouse", "Enter Dose\r\nMouse Left Click item 'AddAsRequiredPRNMedication.Dose' at Center.", repo.AddAsRequiredPRNMedication.DoseInfo, new RecordItemIndex(6));
            repo.AddAsRequiredPRNMedication.Dose.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$AsRe_Dose'.", new RecordItemIndex(7));
            Keyboard.Press(AsRe_Dose);
            
            // Enter Dose range
            Report.Log(ReportLevel.Info, "Mouse", "Enter Dose range\r\nMouse Left Click item 'AddAsRequiredPRNMedication.DoseRange' at Center.", repo.AddAsRequiredPRNMedication.DoseRangeInfo, new RecordItemIndex(8));
            repo.AddAsRequiredPRNMedication.DoseRange.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$AsRe_DoseRange'.", new RecordItemIndex(9));
            Keyboard.Press(AsRe_DoseRange);
            
            // Enter Unit
            Report.Log(ReportLevel.Info, "Mouse", "Enter Unit\r\nMouse Left DoubleClick item 'AddAsRequiredPRNMedication.Unit' at Center.", repo.AddAsRequiredPRNMedication.UnitInfo, new RecordItemIndex(10));
            repo.AddAsRequiredPRNMedication.Unit.DoubleClick();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Back' Press.", new RecordItemIndex(11));
            Keyboard.Press(System.Windows.Forms.Keys.Back, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$AsRe_Unit'.", new RecordItemIndex(12));
            Keyboard.Press(AsRe_Unit);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(13));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'AddAsRequiredPRNMedication.Route' at Center.", repo.AddAsRequiredPRNMedication.RouteInfo, new RecordItemIndex(14));
            repo.AddAsRequiredPRNMedication.Route.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$AsRe_Route'.", new RecordItemIndex(15));
            Keyboard.Press(AsRe_Route);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(16));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            // Enter Frequency
            Report.Log(ReportLevel.Info, "Mouse", "Enter Frequency\r\nMouse Left Click item 'AddAsRequiredPRNMedication.FreqTime' at Center.", repo.AddAsRequiredPRNMedication.FreqTimeInfo, new RecordItemIndex(17));
            repo.AddAsRequiredPRNMedication.FreqTime.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$FreqTime'.", new RecordItemIndex(18));
            Keyboard.Press(FreqTime);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(19));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            // Enter Dose calculation
            Report.Log(ReportLevel.Info, "Mouse", "Enter Dose calculation\r\nMouse Left Click item 'AddAsRequiredPRNMedication.DoseCalculation' at Center.", repo.AddAsRequiredPRNMedication.DoseCalculationInfo, new RecordItemIndex(20));
            repo.AddAsRequiredPRNMedication.DoseCalculation.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$AsRe_DoseCalculation'.", new RecordItemIndex(21));
            Keyboard.Press(AsRe_DoseCalculation);
            
            // Enter MAx Dose
            Report.Log(ReportLevel.Info, "Mouse", "Enter MAx Dose\r\nMouse Left Click item 'AddAsRequiredPRNMedication.MaxDose' at Center.", repo.AddAsRequiredPRNMedication.MaxDoseInfo, new RecordItemIndex(22));
            repo.AddAsRequiredPRNMedication.MaxDose.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$MaxDose'.", new RecordItemIndex(23));
            Keyboard.Press(MaxDose);
            
            // Enter Indication
            Report.Log(ReportLevel.Info, "Mouse", "Enter Indication\r\nMouse Left Click item 'AddAsRequiredPRNMedication.Indication' at Center.", repo.AddAsRequiredPRNMedication.IndicationInfo, new RecordItemIndex(24));
            repo.AddAsRequiredPRNMedication.Indication.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Indication'.", new RecordItemIndex(25));
            Keyboard.Press(Indication);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(26));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            // Enter Med AsRequired Instruction
            Report.Log(ReportLevel.Info, "Mouse", "Enter Med AsRequired Instruction\r\nMouse Left Click item 'AddAsRequiredPRNMedication.AsRequiredInstruction' at Center.", repo.AddAsRequiredPRNMedication.AsRequiredInstructionInfo, new RecordItemIndex(27));
            repo.AddAsRequiredPRNMedication.AsRequiredInstruction.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$AsRequ_Instruction'.", new RecordItemIndex(28));
            Keyboard.Press(AsRequ_Instruction);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(29));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            // Click OK
            Report.Log(ReportLevel.Info, "Mouse", "Click OK\r\nMouse Left Click item 'AddAsRequiredPRNMedication.ButtonOK' at Center.", repo.AddAsRequiredPRNMedication.ButtonOKInfo, new RecordItemIndex(30));
            repo.AddAsRequiredPRNMedication.ButtonOK.Click();
            
            // Verify that the medication is added successfully
            Report.Log(ReportLevel.Info, "Validation", "Verify that the medication is added successfully\r\nValidating Exists on item 'FrmORMain.PostOpMedication.AsReMed.AddedAsRequiredMedication'.", repo.FrmORMain.PostOpMedication.AsReMed.AddedAsRequiredMedicationInfo, new RecordItemIndex(31));
            Validate.Exists(repo.FrmORMain.PostOpMedication.AsReMed.AddedAsRequiredMedicationInfo);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
