///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SAFERsleep.Recordings.Post_Op_Medications
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The EnterPostOpInformation recording.
    /// </summary>
    [TestModule("32d46b80-d45e-4d0b-89a8-12d3422f4e13", ModuleType.Recording, 1)]
    public partial class EnterPostOpInformation : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SAFERsleep.SAFERsleepORRepository repository.
        /// </summary>
        public static SAFERsleep.SAFERsleepORRepository repo = SAFERsleep.SAFERsleepORRepository.Instance;

        static EnterPostOpInformation instance = new EnterPostOpInformation();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public EnterPostOpInformation()
        {
            PostOpRate = "4";
            Mask = "Hudson Mask";
            Target = ">94%";
            PostOpInstruction = "This is PostOpInstruction test";
            VTEPrescribed = "This is VTEPrescribed";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static EnterPostOpInformation Instance
        {
            get { return instance; }
        }

#region Variables

        string _PostOpRate;

        /// <summary>
        /// Gets or sets the value of variable PostOpRate.
        /// </summary>
        [TestVariable("347decc1-88ba-4d00-8ef4-a8b1f5ec71a9")]
        public string PostOpRate
        {
            get { return _PostOpRate; }
            set { _PostOpRate = value; }
        }

        string _Mask;

        /// <summary>
        /// Gets or sets the value of variable Mask.
        /// </summary>
        [TestVariable("f77e3a1a-06c7-4b7c-a2dc-e33e021d06b5")]
        public string Mask
        {
            get { return _Mask; }
            set { _Mask = value; }
        }

        string _Target;

        /// <summary>
        /// Gets or sets the value of variable Target.
        /// </summary>
        [TestVariable("217dfc0f-fcb2-4a48-8c9e-a45d9c0ad07d")]
        public string Target
        {
            get { return _Target; }
            set { _Target = value; }
        }

        string _PostOpInstruction;

        /// <summary>
        /// Gets or sets the value of variable PostOpInstruction.
        /// </summary>
        [TestVariable("98fd1f45-9f46-4a2c-9da1-aadbfb7f9705")]
        public string PostOpInstruction
        {
            get { return _PostOpInstruction; }
            set { _PostOpInstruction = value; }
        }

        string _VTEPrescribed;

        /// <summary>
        /// Gets or sets the value of variable VTEPrescribed.
        /// </summary>
        [TestVariable("7929159d-d6fb-4d54-85ab-5ac696c87069")]
        public string VTEPrescribed
        {
            get { return _VTEPrescribed; }
            set { _VTEPrescribed = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            UserCodeCollection_OR.Clear_TextBox(repo.FrmORMain.PostOpMedication.Information.PostOpOxygenRateInfo, "Combobox");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$PostOpRate'.", new RecordItemIndex(1));
            Keyboard.Press(PostOpRate);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Enter' Press.", new RecordItemIndex(2));
            Keyboard.Press(System.Windows.Forms.Keys.Return, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            UserCodeCollection_OR.Clear_TextBox(repo.FrmORMain.PostOpMedication.Information.PostOpMaskInfo, "Combobox");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Mask'.", new RecordItemIndex(4));
            Keyboard.Press(Mask);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Enter' Press.", new RecordItemIndex(5));
            Keyboard.Press(System.Windows.Forms.Keys.Return, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            UserCodeCollection_OR.Clear_TextBox(repo.FrmORMain.PostOpMedication.Information.TargetInfo, "Combobox");
            
            // Enter Target
            Report.Log(ReportLevel.Info, "Keyboard", "Enter Target\r\nKey sequence from variable '$Target'.", new RecordItemIndex(7));
            Keyboard.Press(Target);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Enter' Press.", new RecordItemIndex(8));
            Keyboard.Press(System.Windows.Forms.Keys.Return, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            UserCodeCollection_OR.Clear_TextBox(repo.FrmORMain.PostOpMedication.Information.RecoveryInstructionsInfo, "Text");
            
            // Enter PostOpInstruction
            Report.Log(ReportLevel.Info, "Keyboard", "Enter PostOpInstruction\r\nKey sequence from variable '$PostOpInstruction'.", new RecordItemIndex(10));
            Keyboard.Press(PostOpInstruction);
            
            Mouse_Click_ButtonYes();
            
            // Enter VTE Prescribed
            Report.Log(ReportLevel.Info, "Mouse", "Enter VTE Prescribed\r\nMouse Left Click item 'FrmORMain.PostOpMedication.Information.VTEPrescribed' at Center.", repo.FrmORMain.PostOpMedication.Information.VTEPrescribedInfo, new RecordItemIndex(12));
            repo.FrmORMain.PostOpMedication.Information.VTEPrescribed.Click();
            
            Key_sequence_VTEPrescribed(repo.FrmORMain.PostOpMedication.Information.VTEPrescribedInfo);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
