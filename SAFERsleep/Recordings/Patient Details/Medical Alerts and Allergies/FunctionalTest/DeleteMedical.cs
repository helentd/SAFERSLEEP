///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SAFERsleep.Recordings.Patient_Details.Medical_Alerts_and_Allergies.FunctionalTest
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The DeleteMedical recording.
    /// </summary>
    [TestModule("144f4667-e97c-4462-a3bb-1165788b3f18", ModuleType.Recording, 1)]
    public partial class DeleteMedical : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SAFERsleep.SAFERsleepORRepository repository.
        /// </summary>
        public static SAFERsleep.SAFERsleepORRepository repo = SAFERsleep.SAFERsleepORRepository.Instance;

        static DeleteMedical instance = new DeleteMedical();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public DeleteMedical()
        {
            DeleteMedicalReason = "DeleteMedicalReason test";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static DeleteMedical Instance
        {
            get { return instance; }
        }

#region Variables

        string _DeleteMedicalReason;

        /// <summary>
        /// Gets or sets the value of variable DeleteMedicalReason.
        /// </summary>
        [TestVariable("faf0e781-00e2-4c3b-9a1a-614436b15948")]
        public string DeleteMedicalReason
        {
            get { return _DeleteMedicalReason; }
            set { _DeleteMedicalReason = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Details.
        /// </summary>
        [TestVariable("830de232-3401-4495-b11c-44f6cd4633fe")]
        public string Details
        {
            get { return repo.Details; }
            set { repo.Details = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Category.
        /// </summary>
        [TestVariable("86944804-657a-42a5-b8f8-41de2ccbfb7c")]
        public string Category
        {
            get { return repo.Category; }
            set { repo.Category = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            // Check before delete Medical name
            CheckBeforeClickShowDeletedItem(repo.FrmORMain.Patient_Details.Medical_Alerts_and_Allergies.ShowDeletedMedicalAlertsInfo);
            Delay.Milliseconds(0);
            
            // Click on Allergy item
            Report.Log(ReportLevel.Info, "Mouse", "Click on Allergy item\r\nMouse Left Click item 'FrmORMain.Patient_Details.Medical_Alerts_and_Allergies.MedicalAlertListItem' at Center.", repo.FrmORMain.Patient_Details.Medical_Alerts_and_Allergies.MedicalAlertListItemInfo, new RecordItemIndex(1));
            repo.FrmORMain.Patient_Details.Medical_Alerts_and_Allergies.MedicalAlertListItem.Click();
            Delay.Milliseconds(200);
            
            // Click on Delete button
            Report.Log(ReportLevel.Info, "Mouse", "Click on Delete button\r\nMouse Left Click item 'FrmORMain.Patient_Details.Medical_Alerts_and_Allergies.DeleteMedicalAlert' at Center.", repo.FrmORMain.Patient_Details.Medical_Alerts_and_Allergies.DeleteMedicalAlertInfo, new RecordItemIndex(2));
            repo.FrmORMain.Patient_Details.Medical_Alerts_and_Allergies.DeleteMedicalAlert.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DeleteMedicalAlert.Reason' at Center.", repo.DeleteMedicalAlert.ReasonInfo, new RecordItemIndex(3));
            repo.DeleteMedicalAlert.Reason.Click();
            Delay.Milliseconds(200);
            
            // Enter reason
            Report.Log(ReportLevel.Info, "Keyboard", "Enter reason\r\nKey sequence from variable '$DeleteMedicalReason'.", new RecordItemIndex(4));
            Keyboard.Press(DeleteMedicalReason);
            Delay.Milliseconds(100);
            
            // CLick on Yes button to finish
            Report.Log(ReportLevel.Info, "Mouse", "CLick on Yes button to finish\r\nMouse Left Click item 'DeleteMedicalAlert.ButtonYes' at Center.", repo.DeleteMedicalAlert.ButtonYesInfo, new RecordItemIndex(5));
            repo.DeleteMedicalAlert.ButtonYes.Click();
            Delay.Milliseconds(200);
            
            // Check the allergy item disapears
            Report.Log(ReportLevel.Info, "Validation", "Check the allergy item disapears\r\nValidating NotExists on item 'FrmORMain.Patient_Details.Medical_Alerts_and_Allergies.MedicalAlertListItem'.", repo.FrmORMain.Patient_Details.Medical_Alerts_and_Allergies.MedicalAlertListItemInfo, new RecordItemIndex(6));
            Validate.NotExists(repo.FrmORMain.Patient_Details.Medical_Alerts_and_Allergies.MedicalAlertListItemInfo);
            Delay.Milliseconds(0);
            
            // Click on Show Deleted item
            Report.Log(ReportLevel.Info, "Mouse", "Click on Show Deleted item\r\nMouse Left Click item 'FrmORMain.Patient_Details.Medical_Alerts_and_Allergies.ShowDeletedMedicalAlerts' at Center.", repo.FrmORMain.Patient_Details.Medical_Alerts_and_Allergies.ShowDeletedMedicalAlertsInfo, new RecordItemIndex(7));
            repo.FrmORMain.Patient_Details.Medical_Alerts_and_Allergies.ShowDeletedMedicalAlerts.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'FrmORMain.Patient_Details.Medical_Alerts_and_Allergies.MedicalAlertListItem'.", repo.FrmORMain.Patient_Details.Medical_Alerts_and_Allergies.MedicalAlertListItemInfo, new RecordItemIndex(8));
            Validate.Exists(repo.FrmORMain.Patient_Details.Medical_Alerts_and_Allergies.MedicalAlertListItemInfo);
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
