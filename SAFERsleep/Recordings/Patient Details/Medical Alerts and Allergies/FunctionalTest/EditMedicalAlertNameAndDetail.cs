///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SAFERsleep.Recordings.Patient_Details.Medical_Alerts_and_Allergies.FunctionalTest
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The EditMedicalAlertNameAndDetail recording.
    /// </summary>
    [TestModule("6779d1e2-a85e-4dd3-8a99-e3e74630d886", ModuleType.Recording, 1)]
    public partial class EditMedicalAlertNameAndDetail : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SAFERsleep.SAFERsleepORRepository repository.
        /// </summary>
        public static SAFERsleep.SAFERsleepORRepository repo = SAFERsleep.SAFERsleepORRepository.Instance;

        static EditMedicalAlertNameAndDetail instance = new EditMedicalAlertNameAndDetail();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public EditMedicalAlertNameAndDetail()
        {
            NewDetail = "Update Category and detail";
            Details = "this is a test Medical Alert Details";
            NewCotegory = "Hepatitis A Carrier";
            Category = "HIV Positive";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static EditMedicalAlertNameAndDetail Instance
        {
            get { return instance; }
        }

#region Variables

        string _NewDetail;

        /// <summary>
        /// Gets or sets the value of variable NewDetail.
        /// </summary>
        [TestVariable("24b47bcd-9cc7-4e36-a1eb-3ec6366d04dd")]
        public string NewDetail
        {
            get { return _NewDetail; }
            set { _NewDetail = value; }
        }

        string _NewCotegory;

        /// <summary>
        /// Gets or sets the value of variable NewCotegory.
        /// </summary>
        [TestVariable("2b778b5e-b5b4-48fc-923b-450fcba23e56")]
        public string NewCotegory
        {
            get { return _NewCotegory; }
            set { _NewCotegory = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Details.
        /// </summary>
        [TestVariable("6a0d8b60-2687-4463-ad47-83f279298019")]
        public string Details
        {
            get { return repo.Details; }
            set { repo.Details = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Category.
        /// </summary>
        [TestVariable("8758a070-cb77-42f0-ad9e-aafa1143df2b")]
        public string Category
        {
            get { return repo.Category; }
            set { repo.Category = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'FrmORMain.Patient_Details.Medical_Alerts_and_Allergies.MedicalAlertListItem' at Center.", repo.FrmORMain.Patient_Details.Medical_Alerts_and_Allergies.MedicalAlertListItemInfo, new RecordItemIndex(0));
            repo.FrmORMain.Patient_Details.Medical_Alerts_and_Allergies.MedicalAlertListItem.DoubleClick();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'EditMedicalAlert.Category' at Center.", repo.EditMedicalAlert.CategoryInfo, new RecordItemIndex(1));
            repo.EditMedicalAlert.Category.Click();
            Delay.Milliseconds(200);
            
            UserCodeCollection_OR.Clear_TextBox(repo.EditMedicalAlert.CategoryInfo, "Combobox");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$NewCotegory'.", new RecordItemIndex(3));
            Keyboard.Press(NewCotegory);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Enter' Press.", new RecordItemIndex(4));
            Keyboard.Press(System.Windows.Forms.Keys.Return, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'EditMedicalAlert.Detail' at Center.", repo.EditMedicalAlert.DetailInfo, new RecordItemIndex(5));
            repo.EditMedicalAlert.Detail.Click();
            Delay.Milliseconds(200);
            
            UserCodeCollection_OR.Clear_TextBox(repo.EditMedicalAlert.DetailInfo, "Text");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$NewDetail'.", new RecordItemIndex(7));
            Keyboard.Press(NewDetail);
            Delay.Milliseconds(100);
            
            // ReAssign new value to old Category
            Report.Log(ReportLevel.Info, "Get Value", "ReAssign new value to old Category\r\nGetting attribute 'Text' from item 'EditMedicalAlert.Category' and assigning its value to variable 'Category'.", repo.EditMedicalAlert.CategoryInfo, new RecordItemIndex(8));
            Category = repo.EditMedicalAlert.Category.Element.GetAttributeValueText("Text");
            Delay.Milliseconds(0);
            
            // ReAssign new value to old Detail
            Report.Log(ReportLevel.Info, "Get Value", "ReAssign new value to old Detail\r\nGetting attribute 'Text' from item 'EditMedicalAlert.Detail' and assigning its value to variable 'Details'.", repo.EditMedicalAlert.DetailInfo, new RecordItemIndex(9));
            Details = repo.EditMedicalAlert.Detail.Element.GetAttributeValueText("Text");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'EditMedicalAlert.ButtonOK' at Center.", repo.EditMedicalAlert.ButtonOKInfo, new RecordItemIndex(10));
            repo.EditMedicalAlert.ButtonOK.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'FrmORMain.Patient_Details.Medical_Alerts_and_Allergies.MedicalAlertListItem'.", repo.FrmORMain.Patient_Details.Medical_Alerts_and_Allergies.MedicalAlertListItemInfo, new RecordItemIndex(11));
            Validate.Exists(repo.FrmORMain.Patient_Details.Medical_Alerts_and_Allergies.MedicalAlertListItemInfo);
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
