///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SAFERsleep.Recordings.Patient_Details.Medical_Alerts_and_Allergies.FunctionalTest
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The NoAllergyMedicalEnterValidation recording.
    /// </summary>
    [TestModule("ef6d1819-c240-4007-93bc-4ac42bc6a2f1", ModuleType.Recording, 1)]
    public partial class NoAllergyMedicalEnterValidation : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SAFERsleep.SAFERsleepORRepository repository.
        /// </summary>
        public static SAFERsleep.SAFERsleepORRepository repo = SAFERsleep.SAFERsleepORRepository.Instance;

        static NoAllergyMedicalEnterValidation instance = new NoAllergyMedicalEnterValidation();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public NoAllergyMedicalEnterValidation()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static NoAllergyMedicalEnterValidation Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            // CLick on Drug Module without enter Allergy/Medical information
            Report.Log(ReportLevel.Info, "Mouse", "CLick on Drug Module without enter Allergy/Medical information\r\nMouse Left Click item 'FrmORMain.OR_Modules.Drugs' at Center.", repo.FrmORMain.OR_Modules.DrugsInfo, new RecordItemIndex(0));
            repo.FrmORMain.OR_Modules.Drugs.Click();
            Delay.Milliseconds(200);
            
            // Verify error message shows
            Report.Log(ReportLevel.Info, "Validation", "Verify error message shows\r\nValidating Exists on item 'Information.PleaseCompleteAreThereClinicallySig'.", repo.Information.PleaseCompleteAreThereClinicallySigInfo, new RecordItemIndex(1));
            Validate.Exists(repo.Information.PleaseCompleteAreThereClinicallySigInfo);
            Delay.Milliseconds(0);
            
            // CLick OK to close eror message
            Report.Log(ReportLevel.Info, "Mouse", "CLick OK to close eror message\r\nMouse Left Click item 'Information.ButtonOK' at Center.", repo.Information.ButtonOKInfo, new RecordItemIndex(2));
            repo.Information.ButtonOK.Click();
            Delay.Milliseconds(200);
            
            // CLick on Pain Prescription Module without enter Allergy/Medical information
            Report.Log(ReportLevel.Info, "Mouse", "CLick on Pain Prescription Module without enter Allergy/Medical information\r\nMouse Left Click item 'FrmORMain.OR_Modules.PainPrescriptions' at Center.", repo.FrmORMain.OR_Modules.PainPrescriptionsInfo, new RecordItemIndex(3));
            repo.FrmORMain.OR_Modules.PainPrescriptions.Click();
            Delay.Milliseconds(200);
            
            // Verify error message shows
            Report.Log(ReportLevel.Info, "Validation", "Verify error message shows\r\nValidating Exists on item 'Information.PleaseEnterTheDrugAllergiesAndCont'.", repo.Information.PleaseEnterTheDrugAllergiesAndContInfo, new RecordItemIndex(4));
            Validate.Exists(repo.Information.PleaseEnterTheDrugAllergiesAndContInfo);
            Delay.Milliseconds(0);
            
            // CLick OK to close eror message
            Report.Log(ReportLevel.Info, "Mouse", "CLick OK to close eror message\r\nMouse Left Click item 'Information.ButtonOK' at Center.", repo.Information.ButtonOKInfo, new RecordItemIndex(5));
            repo.Information.ButtonOK.Click();
            Delay.Milliseconds(200);
            
            // Click on Park case
            Report.Log(ReportLevel.Info, "Mouse", "Click on Park case\r\nMouse Left Click item 'FrmORMain.ParkAnaesthetic' at Center.", repo.FrmORMain.ParkAnaestheticInfo, new RecordItemIndex(6));
            repo.FrmORMain.ParkAnaesthetic.Click();
            Delay.Milliseconds(200);
            
            // Click YEs on Park case confirmation
            Report.Log(ReportLevel.Info, "Mouse", "Click YEs on Park case confirmation\r\nMouse Left Click item 'FrmParkAnaestheticConfirmation.ButtonYes' at Center.", repo.FrmParkAnaestheticConfirmation.ButtonYesInfo, new RecordItemIndex(7));
            repo.FrmParkAnaestheticConfirmation.ButtonYes.Click();
            Delay.Milliseconds(200);
            
            // Verify error message shows
            Report.Log(ReportLevel.Info, "Validation", "Verify error message shows\r\nValidating Exists on item 'Information.PleaseCompleteAreThereClinicallySig'.", repo.Information.PleaseCompleteAreThereClinicallySigInfo, new RecordItemIndex(8));
            Validate.Exists(repo.Information.PleaseCompleteAreThereClinicallySigInfo);
            Delay.Milliseconds(0);
            
            // CLick OK to close eror message
            Report.Log(ReportLevel.Info, "Mouse", "CLick OK to close eror message\r\nMouse Left Click item 'Information.ButtonOK' at Center.", repo.Information.ButtonOKInfo, new RecordItemIndex(9));
            repo.Information.ButtonOK.Click();
            Delay.Milliseconds(200);
            
            // CLick on End Anaesthetic
            Report.Log(ReportLevel.Info, "Mouse", "CLick on End Anaesthetic\r\nMouse Left Click item 'FrmORMain.EndAnaesthetic' at Center.", repo.FrmORMain.EndAnaestheticInfo, new RecordItemIndex(10));
            repo.FrmORMain.EndAnaesthetic.Click();
            Delay.Milliseconds(200);
            
            // Verify error message shows
            Report.Log(ReportLevel.Info, "Validation", "Verify error message shows\r\nValidating Exists on item 'Information.PleaseCompleteAreThereClinicallySig'.", repo.Information.PleaseCompleteAreThereClinicallySigInfo, new RecordItemIndex(11));
            Validate.Exists(repo.Information.PleaseCompleteAreThereClinicallySigInfo);
            Delay.Milliseconds(0);
            
            // CLick OK to close eror message
            Report.Log(ReportLevel.Info, "Mouse", "CLick OK to close eror message\r\nMouse Left Click item 'Information.ButtonOK' at Center.", repo.Information.ButtonOKInfo, new RecordItemIndex(12));
            repo.Information.ButtonOK.Click();
            Delay.Milliseconds(200);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
