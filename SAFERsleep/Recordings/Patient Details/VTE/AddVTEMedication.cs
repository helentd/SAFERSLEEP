///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SAFERsleep.Recordings.Patient_Details.VTE
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The AddVTEMedication recording.
    /// </summary>
    [TestModule("995c4923-fcd5-4f40-9065-adb476949c0d", ModuleType.Recording, 1)]
    public partial class AddVTEMedication : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SAFERsleep.SAFERsleepORRepository repository.
        /// </summary>
        public static SAFERsleep.SAFERsleepORRepository repo = SAFERsleep.SAFERsleepORRepository.Instance;

        static AddVTEMedication instance = new AddVTEMedication();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public AddVTEMedication()
        {
            Medication = "Apixaban";
            Dose = "";
            Unit = "";
            Route = "";
            Frequency = "";
            Instruction = "this is a test comment";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static AddVTEMedication Instance
        {
            get { return instance; }
        }

#region Variables

        string _Dose;

        /// <summary>
        /// Gets or sets the value of variable Dose.
        /// </summary>
        [TestVariable("1289bad9-d9f2-4d88-b6f2-bbf7e9eb69d3")]
        public string Dose
        {
            get { return _Dose; }
            set { _Dose = value; }
        }

        string _Unit;

        /// <summary>
        /// Gets or sets the value of variable Unit.
        /// </summary>
        [TestVariable("c3b761dc-0d62-47ac-b1bf-a7b7d0edc8dc")]
        public string Unit
        {
            get { return _Unit; }
            set { _Unit = value; }
        }

        string _Frequency;

        /// <summary>
        /// Gets or sets the value of variable Frequency.
        /// </summary>
        [TestVariable("4a18fa81-e912-44f6-9105-ec749559ae18")]
        public string Frequency
        {
            get { return _Frequency; }
            set { _Frequency = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Instruction.
        /// </summary>
        [TestVariable("6806a5e7-2211-4083-8605-d498fdbd63de")]
        public string Instruction
        {
            get { return repo.Instruction; }
            set { repo.Instruction = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Medication.
        /// </summary>
        [TestVariable("a9be5fa8-564d-47c1-8ddd-158bb03cd0a1")]
        public string Medication
        {
            get { return repo.Medication; }
            set { repo.Medication = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Route.
        /// </summary>
        [TestVariable("7c68c047-7699-4d0d-a882-1bf07c447a9f")]
        public string Route
        {
            get { return repo.Route; }
            set { repo.Route = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmORMain.Patient_Details.VTE.Add' at Center.", repo.FrmORMain.Patient_Details.VTE.AddInfo, new RecordItemIndex(0));
            repo.FrmORMain.Patient_Details.VTE.Add.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Medication' with focus on 'FrmEditVteMedication.Medication'.", repo.FrmEditVteMedication.MedicationInfo, new RecordItemIndex(1));
            repo.FrmEditVteMedication.Medication.PressKeys(Medication);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Dose' with focus on 'FrmEditVteMedication.Dose'.", repo.FrmEditVteMedication.DoseInfo, new RecordItemIndex(2));
            repo.FrmEditVteMedication.Dose.PressKeys(Dose);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Unit' with focus on 'FrmEditVteMedication.Unit'.", repo.FrmEditVteMedication.UnitInfo, new RecordItemIndex(3));
            repo.FrmEditVteMedication.Unit.PressKeys(Unit);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Route' with focus on 'FrmEditVteMedication.Route'.", repo.FrmEditVteMedication.RouteInfo, new RecordItemIndex(4));
            repo.FrmEditVteMedication.Route.PressKeys(Route);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Frequency' with focus on 'FrmEditVteMedication.Frequency'.", repo.FrmEditVteMedication.FrequencyInfo, new RecordItemIndex(5));
            repo.FrmEditVteMedication.Frequency.PressKeys(Frequency);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Instruction' with focus on 'FrmEditVteMedication.Instruction'.", repo.FrmEditVteMedication.InstructionInfo, new RecordItemIndex(6));
            repo.FrmEditVteMedication.Instruction.PressKeys(Instruction);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmEditVteMedication.OK' at Center.", repo.FrmEditVteMedication.OKInfo, new RecordItemIndex(7));
            repo.FrmEditVteMedication.OK.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'FrmORMain.Patient_Details.VTE.VTEListItem'.", repo.FrmORMain.Patient_Details.VTE.VTEListItemInfo, new RecordItemIndex(8));
            Validate.Exists(repo.FrmORMain.Patient_Details.VTE.VTEListItemInfo);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
