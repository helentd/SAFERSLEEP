///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SAFERsleep.Recordings.Drugs.FunctionalTestDrugs
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The EditDrug_TimeCommentRoute recording.
    /// </summary>
    [TestModule("eef60f47-8240-4487-a330-c6e609f220cb", ModuleType.Recording, 1)]
    public partial class EditDrug_TimeCommentRoute : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SAFERsleep.SAFERsleepORRepository repository.
        /// </summary>
        public static SAFERsleep.SAFERsleepORRepository repo = SAFERsleep.SAFERsleepORRepository.Instance;

        static EditDrug_TimeCommentRoute instance = new EditDrug_TimeCommentRoute();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public EditDrug_TimeCommentRoute()
        {
            NewDose = "10";
            NewUnit = "mcg";
            NewTime = "10:00";
            TimeAddDrug = "12:00";
            NewComment = "Edit Comment";
            NewRoute = "inhale";
            Mode = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static EditDrug_TimeCommentRoute Instance
        {
            get { return instance; }
        }

#region Variables

        string _NewDose;

        /// <summary>
        /// Gets or sets the value of variable NewDose.
        /// </summary>
        [TestVariable("ed8e35be-2e69-4a43-bdf3-b6432ee76630")]
        public string NewDose
        {
            get { return _NewDose; }
            set { _NewDose = value; }
        }

        string _NewUnit;

        /// <summary>
        /// Gets or sets the value of variable NewUnit.
        /// </summary>
        [TestVariable("9f682848-5aa1-4c81-9048-d39695f24fca")]
        public string NewUnit
        {
            get { return _NewUnit; }
            set { _NewUnit = value; }
        }

        string _NewTime;

        /// <summary>
        /// Gets or sets the value of variable NewTime.
        /// </summary>
        [TestVariable("4bd1155e-e189-45c7-ac50-7fa07d506633")]
        public string NewTime
        {
            get { return _NewTime; }
            set { _NewTime = value; }
        }

        string _NewComment;

        /// <summary>
        /// Gets or sets the value of variable NewComment.
        /// </summary>
        [TestVariable("33906918-cca6-47ba-b9dc-bc553ee6da1b")]
        public string NewComment
        {
            get { return _NewComment; }
            set { _NewComment = value; }
        }

        string _NewRoute;

        /// <summary>
        /// Gets or sets the value of variable NewRoute.
        /// </summary>
        [TestVariable("b2f193bf-61d5-4695-96a5-4ebd078c77b6")]
        public string NewRoute
        {
            get { return _NewRoute; }
            set { _NewRoute = value; }
        }

        string _Mode;

        /// <summary>
        /// Gets or sets the value of variable Mode.
        /// </summary>
        [TestVariable("e8544fb3-4c8e-4be1-927c-b6af02cb465a")]
        public string Mode
        {
            get { return _Mode; }
            set { _Mode = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Comment.
        /// </summary>
        [TestVariable("b107503a-1905-4d9f-a866-10f858263131")]
        public string Comment
        {
            get { return repo.Comment; }
            set { repo.Comment = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Route.
        /// </summary>
        [TestVariable("546ee88d-2806-45a5-b54d-c0dc04e81fcc")]
        public string Route
        {
            get { return repo.Route; }
            set { repo.Route = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable DoseUnit.
        /// </summary>
        [TestVariable("b39ccba1-21c8-4d2d-9901-b253fec485cf")]
        public string DoseUnit
        {
            get { return repo.DoseUnit; }
            set { repo.DoseUnit = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable DrugProduct.
        /// </summary>
        [TestVariable("641b5c67-a6fb-4e92-8699-237e53aff7d5")]
        public string DrugProduct
        {
            get { return repo.DrugProduct; }
            set { repo.DrugProduct = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable TimeAddDrug.
        /// </summary>
        [TestVariable("47ab50b1-eabc-4151-bf2b-13376ad97aa9")]
        public string TimeAddDrug
        {
            get { return repo.TimeAddDrug; }
            set { repo.TimeAddDrug = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            // Click on item to edit
            Report.Log(ReportLevel.Info, "Mouse", "Click on item to edit\r\nMouse Left Click item 'FrmORMain.Drugs.Drugs.DrugListItem' at Center.", repo.FrmORMain.Drugs.Drugs.DrugListItemInfo, new RecordItemIndex(0));
            repo.FrmORMain.Drugs.Drugs.DrugListItem.Click();
            Delay.Milliseconds(200);
            
            // Click om edit button
            Report.Log(ReportLevel.Info, "Mouse", "Click om edit button\r\nMouse Left Click item 'FrmORMain.Drugs.Drugs.EditDrug' at Center.", repo.FrmORMain.Drugs.Drugs.EditDrugInfo, new RecordItemIndex(1));
            repo.FrmORMain.Drugs.Drugs.EditDrug.Click();
            Delay.Milliseconds(200);
            
            // Click on time box
            Report.Log(ReportLevel.Info, "Mouse", "Click on time box\r\nMouse Left Click item 'FrmEditDrug.DrugTime' at Center.", repo.FrmEditDrug.DrugTimeInfo, new RecordItemIndex(2));
            repo.FrmEditDrug.DrugTime.Click();
            Delay.Milliseconds(200);
            
            // Clear old value
            UserCodeCollection_OR.Clear_TextBox(repo.FrmEditDrug.DrugTimeInfo, "Text");
            Delay.Milliseconds(0);
            
            // Enter New time
            Report.Log(ReportLevel.Info, "Keyboard", "Enter New time\r\nKey sequence from variable '$NewTime'.", new RecordItemIndex(4));
            Keyboard.Press(NewTime);
            Delay.Milliseconds(100);
            
            // Store time edit drug
            Report.Log(ReportLevel.Info, "Get Value", "Store time edit drug\r\nGetting attribute 'Text' from item 'FrmEditDrug.DrugTime' and assigning its value to variable 'TimeAddDrug'.", repo.FrmEditDrug.DrugTimeInfo, new RecordItemIndex(5));
            TimeAddDrug = repo.FrmEditDrug.DrugTime.Element.GetAttributeValueText("Text");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmEditDrug.Comment' at Center.", repo.FrmEditDrug.CommentInfo, new RecordItemIndex(6));
            repo.FrmEditDrug.Comment.Click();
            Delay.Milliseconds(200);
            
            // Clear old comment
            UserCodeCollection_OR.Clear_TextBox(repo.FrmEditDrug.CommentInfo, "Text");
            Delay.Milliseconds(0);
            
            // Entre new comment
            Report.Log(ReportLevel.Info, "Keyboard", "Entre new comment\r\nKey sequence from variable '$NewComment'.", new RecordItemIndex(8));
            Keyboard.Press(NewComment);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmEditDrug.Route' at Center.", repo.FrmEditDrug.RouteInfo, new RecordItemIndex(9));
            repo.FrmEditDrug.Route.Click();
            Delay.Milliseconds(200);
            
            // Clear old Route
            UserCodeCollection_OR.Clear_TextBox(repo.FrmEditDrug.RouteInfo, "Combobox");
            Delay.Milliseconds(0);
            
            // Enter new Route
            Report.Log(ReportLevel.Info, "Keyboard", "Enter new Route\r\nKey sequence from variable '$NewRoute'.", new RecordItemIndex(11));
            Keyboard.Press(NewRoute);
            Delay.Milliseconds(100);
            
            // Click OK
            Report.Log(ReportLevel.Info, "Mouse", "Click OK\r\nMouse Left Click item 'FrmEditDrug.OK' at Center.", repo.FrmEditDrug.OKInfo, new RecordItemIndex(12));
            repo.FrmEditDrug.OK.Click();
            Delay.Milliseconds(200);
            
            // Reassign new comment and new route to the original one
            ReAssignCommentRoute(NewComment, NewRoute);
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
