///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SAFERsleep.Recordings.Fluids.FunctionalTesting.Output
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Validate_StartLevelAndFinishOutputLevel recording.
    /// </summary>
    [TestModule("302cb4ff-572a-46cd-8072-3e5773deb29e", ModuleType.Recording, 1)]
    public partial class Validate_StartLevelAndFinishOutputLevel : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SAFERsleep.SAFERsleepORRepository repository.
        /// </summary>
        public static SAFERsleep.SAFERsleepORRepository repo = SAFERsleep.SAFERsleepORRepository.Instance;

        static Validate_StartLevelAndFinishOutputLevel instance = new Validate_StartLevelAndFinishOutputLevel();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Validate_StartLevelAndFinishOutputLevel()
        {
            InvalidStartLevel = "1234567890";
            StartLevel = "100";
            InvalidFinishLevel = "100";
            FinishVolume = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Validate_StartLevelAndFinishOutputLevel Instance
        {
            get { return instance; }
        }

#region Variables

        string _InvalidStartLevel;

        /// <summary>
        /// Gets or sets the value of variable InvalidStartLevel.
        /// </summary>
        [TestVariable("e5db0d11-073a-4d89-8a7b-e1f88c4921a6")]
        public string InvalidStartLevel
        {
            get { return _InvalidStartLevel; }
            set { _InvalidStartLevel = value; }
        }

        string _InvalidFinishLevel;

        /// <summary>
        /// Gets or sets the value of variable InvalidFinishLevel.
        /// </summary>
        [TestVariable("ae71cf71-3d1a-406e-8b73-015e170e54f1")]
        public string InvalidFinishLevel
        {
            get { return _InvalidFinishLevel; }
            set { _InvalidFinishLevel = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable OutputUnit.
        /// </summary>
        [TestVariable("b761e92a-c696-4e2a-8d24-287bc9706f6c")]
        public string OutputUnit
        {
            get { return repo.OutputUnit; }
            set { repo.OutputUnit = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable FinishVolume.
        /// </summary>
        [TestVariable("5b4920f3-2f12-4fa2-a1e0-2a09f922b53e")]
        public string FinishVolume
        {
            get { return repo.FinishVolume; }
            set { repo.FinishVolume = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable FluidOutputName.
        /// </summary>
        [TestVariable("2f23e653-6203-421e-ae39-cf8e4a7eaa0a")]
        public string FluidOutputName
        {
            get { return repo.FluidOutputName; }
            set { repo.FluidOutputName = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable StartLevel.
        /// </summary>
        [TestVariable("03290693-b648-4462-944c-1c7891721926")]
        public string StartLevel
        {
            get { return repo.StartLevel; }
            set { repo.StartLevel = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmORMain.FluidBalance.Tabs.FluidOutput' at Center.", repo.FrmORMain.FluidBalance.Tabs.FluidOutputInfo, new RecordItemIndex(0));
            repo.FrmORMain.FluidBalance.Tabs.FluidOutput.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'FrmORMain.FluidBalance.AddedFluidOutput' at Center.", repo.FrmORMain.FluidBalance.AddedFluidOutputInfo, new RecordItemIndex(1));
            repo.FrmORMain.FluidBalance.AddedFluidOutput.DoubleClick();
            Delay.Milliseconds(200);
            
            UserCodeCollection_OR.Clear_TextBox(repo.AddFluidOutput.FinishVolumeInfo, "Text");
            Delay.Milliseconds(0);
            
            UserCodeCollection_OR.Clear_TextBox(repo.AddFluidOutput.OutputStartVolumeInfo, "Text");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$InvalidStartLevel'.", new RecordItemIndex(4));
            Keyboard.Press(InvalidStartLevel);
            Delay.Milliseconds(100);
            
            // CLick OK on Edit window
            Report.Log(ReportLevel.Info, "Mouse", "CLick OK on Edit window\r\nMouse Left Click item 'AddFluidOutput.ButtonOK' at Center.", repo.AddFluidOutput.ButtonOKInfo, new RecordItemIndex(5));
            repo.AddFluidOutput.ButtonOK.Click();
            Delay.Milliseconds(200);
            
            // Validate error message when name is empty
            Report.Log(ReportLevel.Info, "Validation", "Validate error message when name is empty\r\nValidating Exists on item 'Error.StartLevelIsTooLarge'.", repo.Error.StartLevelIsTooLargeInfo, new RecordItemIndex(6));
            Validate.Exists(repo.Error.StartLevelIsTooLargeInfo);
            Delay.Milliseconds(0);
            
            // Click Ok on error message
            Report.Log(ReportLevel.Info, "Mouse", "Click Ok on error message\r\nMouse Left Click item 'Error.ButtonOK' at Center.", repo.Error.ButtonOKInfo, new RecordItemIndex(7));
            repo.Error.ButtonOK.Click();
            Delay.Milliseconds(200);
            
            // Click on Output FinishLevel
            Report.Log(ReportLevel.Info, "Mouse", "Click on Output FinishLevel\r\nMouse Left Click item 'AddFluidOutput.FinishVolume' at Center.", repo.AddFluidOutput.FinishVolumeInfo, new RecordItemIndex(8));
            repo.AddFluidOutput.FinishVolume.Click();
            Delay.Milliseconds(200);
            
            // Enter an invalid FinishLevel
            Report.Log(ReportLevel.Info, "Keyboard", "Enter an invalid FinishLevel\r\nKey sequence from variable '$InvalidFinishLevel'.", new RecordItemIndex(9));
            Keyboard.Press(InvalidFinishLevel);
            Delay.Milliseconds(100);
            
            // CLick OK on Edit window
            Report.Log(ReportLevel.Info, "Mouse", "CLick OK on Edit window\r\nMouse Left Click item 'AddFluidOutput.ButtonOK' at Center.", repo.AddFluidOutput.ButtonOKInfo, new RecordItemIndex(10));
            repo.AddFluidOutput.ButtonOK.Click();
            Delay.Milliseconds(200);
            
            // Validate error message when name is empty
            Report.Log(ReportLevel.Info, "Validation", "Validate error message when name is empty\r\nValidating Exists on item 'Error.TheStartLevelCannotBeLessThanThe'.", repo.Error.TheStartLevelCannotBeLessThanTheInfo, new RecordItemIndex(11));
            Validate.Exists(repo.Error.TheStartLevelCannotBeLessThanTheInfo);
            Delay.Milliseconds(0);
            
            // Click Ok on error message
            Report.Log(ReportLevel.Info, "Mouse", "Click Ok on error message\r\nMouse Left Click item 'Error.ButtonOK' at Center.", repo.Error.ButtonOKInfo, new RecordItemIndex(12));
            repo.Error.ButtonOK.Click();
            Delay.Milliseconds(200);
            
            UserCodeCollection_OR.Clear_TextBox(repo.AddFluidOutput.FinishVolumeInfo, "Text");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$FinishVolume' with focus on 'AddFluidOutput.FinishVolume'.", repo.AddFluidOutput.FinishVolumeInfo, new RecordItemIndex(14));
            repo.AddFluidOutput.FinishVolume.PressKeys(FinishVolume);
            Delay.Milliseconds(100);
            
            // CLick OK on Edit window
            Report.Log(ReportLevel.Info, "Mouse", "CLick OK on Edit window\r\nMouse Left Click item 'AddFluidOutput.ButtonOK' at Center.", repo.AddFluidOutput.ButtonOKInfo, new RecordItemIndex(15));
            repo.AddFluidOutput.ButtonOK.Click();
            Delay.Milliseconds(200);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
