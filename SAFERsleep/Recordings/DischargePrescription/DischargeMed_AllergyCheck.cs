///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SAFERsleep.Recordings.DischargePrescription
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The DischargeMed_AllergyCheck recording.
    /// </summary>
    [TestModule("f3c4de22-f4db-434c-adb8-77ede5e2d316", ModuleType.Recording, 1)]
    public partial class DischargeMed_AllergyCheck : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SAFERsleep.SAFERsleepORRepository repository.
        /// </summary>
        public static SAFERsleep.SAFERsleepORRepository repo = SAFERsleep.SAFERsleepORRepository.Instance;

        static DischargeMed_AllergyCheck instance = new DischargeMed_AllergyCheck();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public DischargeMed_AllergyCheck()
        {
            AlertName = "Opiod";
            AlertType = "Allergy";
            AlertClass = "Class";
            DrugClass = "Drug";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static DischargeMed_AllergyCheck Instance
        {
            get { return instance; }
        }

#region Variables

        string _AlertName;

        /// <summary>
        /// Gets or sets the value of variable AlertName.
        /// </summary>
        [TestVariable("20175bc3-bfb1-44b8-b23a-15f17a051489")]
        public string AlertName
        {
            get { return _AlertName; }
            set { _AlertName = value; }
        }

        string _AlertClass;

        /// <summary>
        /// Gets or sets the value of variable AlertClass.
        /// </summary>
        [TestVariable("86415976-330e-477a-9989-d910b06676a6")]
        public string AlertClass
        {
            get { return _AlertClass; }
            set { _AlertClass = value; }
        }

        string _DrugClass;

        /// <summary>
        /// Gets or sets the value of variable DrugClass.
        /// </summary>
        [TestVariable("87e704b7-ad86-4479-9699-17c2c4fc5ba4")]
        public string DrugClass
        {
            get { return _DrugClass; }
            set { _DrugClass = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable WarningMessage.
        /// </summary>
        [TestVariable("8fd852be-fb2f-4129-adb5-4f5d3e90c2f0")]
        public string WarningMessage
        {
            get { return repo.WarningMessage; }
            set { repo.WarningMessage = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable DischarInstruction.
        /// </summary>
        [TestVariable("8ed1c80c-50c0-463d-83a3-bbc3e2ac725f")]
        public string DischarInstruction
        {
            get { return repo.DischarInstruction; }
            set { repo.DischarInstruction = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable DischarSupply.
        /// </summary>
        [TestVariable("97a6c343-dae8-4e4f-bbdf-3627b518bf73")]
        public string DischarSupply
        {
            get { return repo.DischarSupply; }
            set { repo.DischarSupply = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable DischargeDrug.
        /// </summary>
        [TestVariable("cea22d0d-9404-448a-bf5f-9439925141c0")]
        public string DischargeDrug
        {
            get { return repo.DischargeDrug; }
            set { repo.DischargeDrug = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable AlertType.
        /// </summary>
        [TestVariable("3306163b-843e-4a62-ae4b-0061b4264b7e")]
        public string AlertType
        {
            get { return repo.AlertType; }
            set { repo.AlertType = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            // 2. Validate Warning box displays when added Drug is in patient's allergy list
            CheckWarningAllert(AlertName, AlertType, AlertClass, DrugClass);
            Delay.Milliseconds(0);
            
            // Validate OK button is disable
            Report.Log(ReportLevel.Info, "Validation", "Validate OK button is disable\r\nValidating AttributeEqual (Enabled='False') on item 'AddDischargePrescription.ButtonOK'.", repo.AddDischargePrescription.ButtonOKInfo, new RecordItemIndex(1));
            Validate.AttributeEqual(repo.AddDischargePrescription.ButtonOKInfo, "Enabled", "False");
            Delay.Milliseconds(0);
            
            // Click On "Stop Alert" button
            Report.Log(ReportLevel.Info, "Mouse", "Click On \"Stop Alert\" button\r\nMouse Left Click item 'AddDischargePrescription.StopAlerts' at Center.", repo.AddDischargePrescription.StopAlertsInfo, new RecordItemIndex(2));
            repo.AddDischargePrescription.StopAlerts.Click();
            Delay.Milliseconds(200);
            
            // Enter reason for stop alert
            Report.Log(ReportLevel.Info, "Mouse", "Enter reason for stop alert\r\nMouse Left Click item 'StopAlert_ReasonPrescribingDrug.ReasonToPrescribeDrug' at Center.", repo.StopAlert_ReasonPrescribingDrug.ReasonToPrescribeDrugInfo, new RecordItemIndex(3));
            repo.StopAlert_ReasonPrescribingDrug.ReasonToPrescribeDrug.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'Stop Alert Reason Test' with focus on 'StopAlert_ReasonPrescribingDrug.ReasonToPrescribeDrug'.", repo.StopAlert_ReasonPrescribingDrug.ReasonToPrescribeDrugInfo, new RecordItemIndex(4));
            repo.StopAlert_ReasonPrescribingDrug.ReasonToPrescribeDrug.PressKeys("Stop Alert Reason Test");
            Delay.Milliseconds(0);
            
            // Click on OK on Stop alert box
            Report.Log(ReportLevel.Info, "Mouse", "Click on OK on Stop alert box\r\nMouse Left Click item 'StopAlert_ReasonPrescribingDrug.ButtonOK' at Center.", repo.StopAlert_ReasonPrescribingDrug.ButtonOKInfo, new RecordItemIndex(5));
            repo.StopAlert_ReasonPrescribingDrug.ButtonOK.Click();
            Delay.Milliseconds(200);
            
            // Click on Ok button
            Report.Log(ReportLevel.Info, "Mouse", "Click on Ok button\r\nMouse Left Click item 'AddDischargePrescription.ButtonOK' at Center.", repo.AddDischargePrescription.ButtonOKInfo, new RecordItemIndex(6));
            repo.AddDischargePrescription.ButtonOK.Click();
            Delay.Milliseconds(200);
            
            // Verify the Medication is added succesfully
            Report.Log(ReportLevel.Info, "Validation", "Verify the Medication is added succesfully\r\nValidating Exists on item 'FrmORMain.DischargePrecription.AddedDischargeMedication'.", repo.FrmORMain.DischargePrecription.AddedDischargeMedicationInfo, new RecordItemIndex(7));
            Validate.Exists(repo.FrmORMain.DischargePrecription.AddedDischargeMedicationInfo);
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
