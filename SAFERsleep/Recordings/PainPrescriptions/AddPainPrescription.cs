///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SAFERsleep.Recordings.PainPrescriptions
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The AddPainPrescription recording.
    /// </summary>
    [TestModule("80b2019c-9d4d-44b9-aece-28c0a58a74a0", ModuleType.Recording, 1)]
    public partial class AddPainPrescription : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SAFERsleep.SAFERsleepORRepository repository.
        /// </summary>
        public static SAFERsleep.SAFERsleepORRepository repo = SAFERsleep.SAFERsleepORRepository.Instance;

        static AddPainPrescription instance = new AddPainPrescription();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public AddPainPrescription()
        {
            PrescriptionType = "Co-Analgesia";
            BlockName = "Brachial Plexus";
            Medication = "Ketamine ONE milligram/ml (100 mg of Ketamine made up to 100 mls with Normal Saline)";
            FormName = "fmCoAnalgesia";
            Mode = "PAED Continuous Infusion only";
            Weight = "50";
            LoadingDose = "5";
            BolusDose = "6";
            ContinuousRate = "7";
            Lockout = "5";
            HourDose = "1";
            HrDoseLimit = "4";
            Unit = "ml";
            Instruction = "This is Co-Analgesia test";
            SecondInfusion = "No";
            LoadingDose2 = "5";
            BolusDose2 = "6";
            ContinuousRate2 = "7";
            Lockout2 = "5";
            HourDose2 = "4";
            HrDoseLimit2 = "4";
            Instruction2 = "This is Instruction2";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static AddPainPrescription Instance
        {
            get { return instance; }
        }

#region Variables

        string _Mode;

        /// <summary>
        /// Gets or sets the value of variable Mode.
        /// </summary>
        [TestVariable("f3da8088-23b0-4f0e-8923-73f4bbc2175c")]
        public string Mode
        {
            get { return _Mode; }
            set { _Mode = value; }
        }

        string _Weight;

        /// <summary>
        /// Gets or sets the value of variable Weight.
        /// </summary>
        [TestVariable("e5d3af91-a797-4b7c-86a5-965ef676979d")]
        public string Weight
        {
            get { return _Weight; }
            set { _Weight = value; }
        }

        string _LoadingDose;

        /// <summary>
        /// Gets or sets the value of variable LoadingDose.
        /// </summary>
        [TestVariable("13618b5c-79be-49a4-8f87-7c6d46262ede")]
        public string LoadingDose
        {
            get { return _LoadingDose; }
            set { _LoadingDose = value; }
        }

        string _BolusDose;

        /// <summary>
        /// Gets or sets the value of variable BolusDose.
        /// </summary>
        [TestVariable("923f1d30-f584-4332-942b-0d9de149240e")]
        public string BolusDose
        {
            get { return _BolusDose; }
            set { _BolusDose = value; }
        }

        string _ContinuousRate;

        /// <summary>
        /// Gets or sets the value of variable ContinuousRate.
        /// </summary>
        [TestVariable("0d055e54-6bb2-4fa8-bd49-5aedf0a92848")]
        public string ContinuousRate
        {
            get { return _ContinuousRate; }
            set { _ContinuousRate = value; }
        }

        string _Lockout;

        /// <summary>
        /// Gets or sets the value of variable Lockout.
        /// </summary>
        [TestVariable("d265b5db-fcfb-428b-b314-f606dbe0ef32")]
        public string Lockout
        {
            get { return _Lockout; }
            set { _Lockout = value; }
        }

        string _HourDose;

        /// <summary>
        /// Gets or sets the value of variable HourDose.
        /// </summary>
        [TestVariable("a1bccadd-acc9-4009-ac1f-4a4d61880fa4")]
        public string HourDose
        {
            get { return _HourDose; }
            set { _HourDose = value; }
        }

        string _HrDoseLimit;

        /// <summary>
        /// Gets or sets the value of variable HrDoseLimit.
        /// </summary>
        [TestVariable("5740827a-d6ed-4b7e-9bf5-ad53a8dfaa12")]
        public string HrDoseLimit
        {
            get { return _HrDoseLimit; }
            set { _HrDoseLimit = value; }
        }

        string _Unit;

        /// <summary>
        /// Gets or sets the value of variable Unit.
        /// </summary>
        [TestVariable("74da6578-8e4f-4c04-b1f9-7f76a67ca382")]
        public string Unit
        {
            get { return _Unit; }
            set { _Unit = value; }
        }

        string _SecondInfusion;

        /// <summary>
        /// Gets or sets the value of variable SecondInfusion.
        /// </summary>
        [TestVariable("145990e4-a4bd-40e8-8628-40b879cc1089")]
        public string SecondInfusion
        {
            get { return _SecondInfusion; }
            set { _SecondInfusion = value; }
        }

        string _LoadingDose2;

        /// <summary>
        /// Gets or sets the value of variable LoadingDose2.
        /// </summary>
        [TestVariable("b7462a59-c81f-443e-a857-0e53ca0b4bca")]
        public string LoadingDose2
        {
            get { return _LoadingDose2; }
            set { _LoadingDose2 = value; }
        }

        string _BolusDose2;

        /// <summary>
        /// Gets or sets the value of variable BolusDose2.
        /// </summary>
        [TestVariable("9366b607-a3ce-4812-bf9e-9565a667e381")]
        public string BolusDose2
        {
            get { return _BolusDose2; }
            set { _BolusDose2 = value; }
        }

        string _ContinuousRate2;

        /// <summary>
        /// Gets or sets the value of variable ContinuousRate2.
        /// </summary>
        [TestVariable("17aadf7d-d534-48d4-87b5-7ce4accb4cff")]
        public string ContinuousRate2
        {
            get { return _ContinuousRate2; }
            set { _ContinuousRate2 = value; }
        }

        string _Lockout2;

        /// <summary>
        /// Gets or sets the value of variable Lockout2.
        /// </summary>
        [TestVariable("1ac7f31a-d33c-4b4d-9b7f-d04844fbf69d")]
        public string Lockout2
        {
            get { return _Lockout2; }
            set { _Lockout2 = value; }
        }

        string _HourDose2;

        /// <summary>
        /// Gets or sets the value of variable HourDose2.
        /// </summary>
        [TestVariable("e5bab761-4d47-41cd-97ed-61ecff494d4e")]
        public string HourDose2
        {
            get { return _HourDose2; }
            set { _HourDose2 = value; }
        }

        string _HrDoseLimit2;

        /// <summary>
        /// Gets or sets the value of variable HrDoseLimit2.
        /// </summary>
        [TestVariable("d7846120-9906-42a7-bd7f-248f51ef893a")]
        public string HrDoseLimit2
        {
            get { return _HrDoseLimit2; }
            set { _HrDoseLimit2 = value; }
        }

        string _Instruction2;

        /// <summary>
        /// Gets or sets the value of variable Instruction2.
        /// </summary>
        [TestVariable("25930376-9a7d-4d73-95e1-7f195fe972c8")]
        public string Instruction2
        {
            get { return _Instruction2; }
            set { _Instruction2 = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable FormName.
        /// </summary>
        [TestVariable("177a8e11-f912-45b7-bebc-eda0b3869398")]
        public string FormName
        {
            get { return repo.FormName; }
            set { repo.FormName = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable PrescriptionType.
        /// </summary>
        [TestVariable("0e1ac089-4bf6-4121-9fb1-143201b708e5")]
        public string PrescriptionType
        {
            get { return repo.PrescriptionType; }
            set { repo.PrescriptionType = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable BlockName.
        /// </summary>
        [TestVariable("d307fc7f-5550-4015-a38f-541de8cce5f3")]
        public string BlockName
        {
            get { return repo.BlockName; }
            set { repo.BlockName = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Medication.
        /// </summary>
        [TestVariable("ff16c890-0889-4fbc-a6da-ed6d9ec99e0a")]
        public string Medication
        {
            get { return repo.Medication; }
            set { repo.Medication = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Instruction.
        /// </summary>
        [TestVariable("942d3849-e283-4718-ae63-af4ba6cc126c")]
        public string Instruction
        {
            get { return repo.Instruction; }
            set { repo.Instruction = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            // Click on "Add" button
            Report.Log(ReportLevel.Info, "Mouse", "Click on \"Add\" button\r\nMouse Left Click item 'FrmORMain.PainPrescriptions.ButtonAdd' at Center.", repo.FrmORMain.PainPrescriptions.ButtonAddInfo, new RecordItemIndex(0));
            repo.FrmORMain.PainPrescriptions.ButtonAdd.Click();
            
            // Select Prescription Type
            Report.Log(ReportLevel.Info, "Mouse", "Select Prescription Type\r\nMouse Left Click item 'AddPainPrescription.PrescriptionType' at Center.", repo.AddPainPrescription.PrescriptionTypeInfo, new RecordItemIndex(1));
            repo.AddPainPrescription.PrescriptionType.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$PrescriptionType'.", new RecordItemIndex(2));
            Keyboard.Press(PrescriptionType);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Enter' Press.", new RecordItemIndex(3));
            Keyboard.Press(System.Windows.Forms.Keys.Return, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            // Enter Block/Mode/Medication base on the Prescription type
            SelectMedication(BlockName, Medication, FormName, Mode, Weight, repo.AddPainPrescription.ToxicDisclaimBoxInfo);
            
            Enter_Dose_Details(LoadingDose, BolusDose, ContinuousRate, Lockout, HourDose, HrDoseLimit, Unit, Instruction);
            
            Enter_SecondInfusion_Details(LoadingDose2, BolusDose2, ContinuousRate2, Lockout2, HourDose2, HrDoseLimit2, Unit, Instruction2, SecondInfusion);
            
            // CLick OK to save the prescription
            Report.Log(ReportLevel.Info, "Mouse", "CLick OK to save the prescription\r\nMouse Left Click item 'AddPainPrescription.ButtonOK' at Center.", repo.AddPainPrescription.ButtonOKInfo, new RecordItemIndex(7));
            repo.AddPainPrescription.ButtonOK.Click();
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
