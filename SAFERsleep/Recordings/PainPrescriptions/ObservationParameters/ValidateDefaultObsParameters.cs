///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SAFERsleep.Recordings.PainPrescriptions.ObservationParameters
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The ValidateDefaultObsParameters recording.
    /// </summary>
    [TestModule("e42c2bdb-f043-4703-b314-f889e2fcb1cc", ModuleType.Recording, 1)]
    public partial class ValidateDefaultObsParameters : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SAFERsleep.SAFERsleepORRepository repository.
        /// </summary>
        public static SAFERsleep.SAFERsleepORRepository repo = SAFERsleep.SAFERsleepORRepository.Instance;

        static ValidateDefaultObsParameters instance = new ValidateDefaultObsParameters();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public ValidateDefaultObsParameters()
        {
            PulseLower = "";
            PulseUpper = "";
            RespRate = "";
            SpO2 = "";
            BPLower = "";
            BPUpper = "";
            PainScore = "";
            BlockLevel = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static ValidateDefaultObsParameters Instance
        {
            get { return instance; }
        }

#region Variables

        string _PulseLower;

        /// <summary>
        /// Gets or sets the value of variable PulseLower.
        /// </summary>
        [TestVariable("d8ddcb8c-dbdc-405f-b89b-a08c7d84228a")]
        public string PulseLower
        {
            get { return _PulseLower; }
            set { _PulseLower = value; }
        }

        string _PulseUpper;

        /// <summary>
        /// Gets or sets the value of variable PulseUpper.
        /// </summary>
        [TestVariable("4b79189e-e96e-4806-9afd-0cedd4fc170c")]
        public string PulseUpper
        {
            get { return _PulseUpper; }
            set { _PulseUpper = value; }
        }

        string _RespRate;

        /// <summary>
        /// Gets or sets the value of variable RespRate.
        /// </summary>
        [TestVariable("f482b1e2-bc71-4a86-8206-72e73e45a860")]
        public string RespRate
        {
            get { return _RespRate; }
            set { _RespRate = value; }
        }

        string _SpO2;

        /// <summary>
        /// Gets or sets the value of variable SpO2.
        /// </summary>
        [TestVariable("180a6a02-8a2c-459e-ad71-c3a20eaaf741")]
        public string SpO2
        {
            get { return _SpO2; }
            set { _SpO2 = value; }
        }

        string _BPLower;

        /// <summary>
        /// Gets or sets the value of variable BPLower.
        /// </summary>
        [TestVariable("ddd337bc-a233-4d5f-904d-a306024dcbed")]
        public string BPLower
        {
            get { return _BPLower; }
            set { _BPLower = value; }
        }

        string _BPUpper;

        /// <summary>
        /// Gets or sets the value of variable BPUpper.
        /// </summary>
        [TestVariable("540976f9-8308-4953-a4ec-1446fae58b11")]
        public string BPUpper
        {
            get { return _BPUpper; }
            set { _BPUpper = value; }
        }

        string _PainScore;

        /// <summary>
        /// Gets or sets the value of variable PainScore.
        /// </summary>
        [TestVariable("4ef717ee-b64a-43a3-b094-391095aabe55")]
        public string PainScore
        {
            get { return _PainScore; }
            set { _PainScore = value; }
        }

        string _BlockLevel;

        /// <summary>
        /// Gets or sets the value of variable BlockLevel.
        /// </summary>
        [TestVariable("7e297d9e-61a9-4843-b44e-b921f0ab3bd6")]
        public string BlockLevel
        {
            get { return _BlockLevel; }
            set { _BlockLevel = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$PulseLower) on item 'FrmORMain.PainPrescriptions.PulseLower'.", repo.FrmORMain.PainPrescriptions.PulseLowerInfo, new RecordItemIndex(0));
            Validate.AttributeEqual(repo.FrmORMain.PainPrescriptions.PulseLowerInfo, "Text", PulseLower);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$PulseUpper) on item 'FrmORMain.PainPrescriptions.PulseUpper'.", repo.FrmORMain.PainPrescriptions.PulseUpperInfo, new RecordItemIndex(1));
            Validate.AttributeEqual(repo.FrmORMain.PainPrescriptions.PulseUpperInfo, "Text", PulseUpper);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$RespRate) on item 'FrmORMain.PainPrescriptions.RespRate'.", repo.FrmORMain.PainPrescriptions.RespRateInfo, new RecordItemIndex(2));
            Validate.AttributeEqual(repo.FrmORMain.PainPrescriptions.RespRateInfo, "Text", RespRate);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$SpO2) on item 'FrmORMain.PainPrescriptions.SpO2'.", repo.FrmORMain.PainPrescriptions.SpO2Info, new RecordItemIndex(3));
            Validate.AttributeEqual(repo.FrmORMain.PainPrescriptions.SpO2Info, "Text", SpO2);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$BPLower) on item 'FrmORMain.PainPrescriptions.BPLower'.", repo.FrmORMain.PainPrescriptions.BPLowerInfo, new RecordItemIndex(4));
            Validate.AttributeEqual(repo.FrmORMain.PainPrescriptions.BPLowerInfo, "Text", BPLower);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$BPUpper) on item 'FrmORMain.PainPrescriptions.BPUpper'.", repo.FrmORMain.PainPrescriptions.BPUpperInfo, new RecordItemIndex(5));
            Validate.AttributeEqual(repo.FrmORMain.PainPrescriptions.BPUpperInfo, "Text", BPUpper);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$PainScore) on item 'FrmORMain.PainPrescriptions.PainScore'.", repo.FrmORMain.PainPrescriptions.PainScoreInfo, new RecordItemIndex(6));
            Validate.AttributeEqual(repo.FrmORMain.PainPrescriptions.PainScoreInfo, "Text", PainScore);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$BlockLevel) on item 'FrmORMain.PainPrescriptions.BlockLevel'.", repo.FrmORMain.PainPrescriptions.BlockLevelInfo, new RecordItemIndex(7));
            Validate.AttributeEqual(repo.FrmORMain.PainPrescriptions.BlockLevelInfo, "Text", BlockLevel);
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
