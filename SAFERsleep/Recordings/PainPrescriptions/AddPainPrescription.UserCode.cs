///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace SAFERsleep.Recordings.PainPrescriptions
{
    public partial class AddPainPrescription
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }
        
        private bool enteredUnit= false;

        public void SelectMedication(string BlockName, string Medication, string FormName, string Mode, string Weight, RepoItemInfo DisclaimBox)
        {
        	//==================// Select Regional Block name.Only  PCEA and Regional Infusion need Block Name
        	if(FormName =="fmPCEA" || FormName=="fmRegionalInfusion")
        	{         	
        		// Select Regional Block name
	            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'AddPainPrescription.RegionalBlock' at Center.", repo.AddPainPrescription.RegionalBlockInfo, new RecordItemIndex(0));
	            repo.AddPainPrescription.RegionalBlock.Click();
	            Delay.Milliseconds(200);
	            
	            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Home' Press.");
	            Keyboard.Press(System.Windows.Forms.Keys.Home, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
	            Delay.Milliseconds(200);
	            
	            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Shift+End' Press.");
	            Keyboard.Press(System.Windows.Forms.Keys.End | System.Windows.Forms.Keys.Shift, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
	            Delay.Milliseconds(200);
	            
	            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Back' Press.");
	            Keyboard.Press(System.Windows.Forms.Keys.Back, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
	            Delay.Milliseconds(200);
	            
	            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$BlockName'.", new RecordItemIndex(1));
	            Keyboard.Press(BlockName);
	            Delay.Milliseconds(100);
	            
	            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Enter' Press.", new RecordItemIndex(2));
	            Keyboard.Press(System.Windows.Forms.Keys.Return, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
	            Delay.Milliseconds(0);   
        	}
        	//============ Seelct Medication name, Mode ( for all type of pain Prescrpition)===================================
            // Select Medication name 
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'AddPainPrescription.Medication' at Center.", repo.AddPainPrescription.MedicationInfo, new RecordItemIndex(3));
            repo.AddPainPrescription.Medication.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Medication'.", new RecordItemIndex(4));
            Keyboard.Press(Medication);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Enter' Press.", new RecordItemIndex(5));
            Keyboard.Press(System.Windows.Forms.Keys.Return, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            // Select Mode
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'AddPainPrescription.Mode' at Center.", repo.AddPainPrescription.ModeInfo, new RecordItemIndex(6));
            repo.AddPainPrescription.Mode.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Mode'.", new RecordItemIndex(7));
            Keyboard.Press(Mode);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Enter' Press.", new RecordItemIndex(8));
            Keyboard.Press(System.Windows.Forms.Keys.Return, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            //===== Enter Toxic limitation. Only for PCEA, Resgional, and Col-Analgesia ( NOT PCA)==================
            if(FormName =="fmPCEA" || FormName=="fmRegionalInfusion" || FormName=="fmCoAnalgesia" )
        	{
            
	            // Enter Weight
	            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'AddPainPrescription.Weight' at Center.", repo.AddPainPrescription.WeightInfo, new RecordItemIndex(9));
	            repo.AddPainPrescription.Weight.DoubleClick();
	            Delay.Milliseconds(200);
	            
	            // press "Backspace" to delete the current value
		        Keyboard.Press(System.Windows.Forms.Keys.Back, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
	            
	            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Weight'.", new RecordItemIndex(10));
	            Keyboard.Press(Weight);
	            Delay.Milliseconds(5000);
	            
	            // Click "Acknowledge" button
	            if(DisclaimBox.Exists(1000)&& repo.AddPainPrescription.ToxicDisclaimBox.Visible)
	            {
	            	Report.Log(ReportLevel.Info, "Mouse", "Click \"Acknowledge\" button\r\nMouse Left Click item 'AddPainPrescription.Acknowledge' at Center.", repo.AddPainPrescription.AcknowledgeInfo, new RecordItemIndex(11));
	           		repo.AddPainPrescription.Acknowledge.Click();
	            	Delay.Milliseconds(200);
	           	}
            }
        }
        
        // FOR PCEA, Regional First Infusion
        private	void Enter_Dose_Details(string LoadingDose, string BolusDose, string ContinuousRate, string Lockout, string HourDose, string HrDoseLimit, string Unit, string Instruction)        	
        {     	        	
    		// Enter Loading Dose
    		if (repo.AddPainPrescription.DoseDetails.LoadingDose.Visible)
    		{
        		Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'AddPainPrescription.DoseDetails.LoadingDose' at Center.", repo.AddPainPrescription.DoseDetails.LoadingDoseInfo, new RecordItemIndex(12));
                repo.AddPainPrescription.DoseDetails.LoadingDose.Click();
                 Delay.Milliseconds(200);
            
                Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$LoadingDose'.", new RecordItemIndex(13));
                Keyboard.Press(LoadingDose);
                Delay.Milliseconds(100);
                
                //select Unit for loading dose
                if (!enteredUnit) 
                {
	                EnterUnit( repo.AddPainPrescription.DoseDetails.LoadingUnit, repo.AddPainPrescription.DoseDetails.LoadingUnitInfo, Unit );
	                enteredUnit=true;
                }
    	    }
            
            // Enter Bolus Dose
            if (repo.AddPainPrescription.DoseDetails.BolusDose.Visible)
            {
            	
            	Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'AddPainPrescription.DoseDetails.BolusDose' at Center.", repo.AddPainPrescription.DoseDetails.BolusDoseInfo, new RecordItemIndex(18));
	            repo.AddPainPrescription.DoseDetails.BolusDose.Click();
	            Delay.Milliseconds(200);
	            
	            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$BolusDose'.", new RecordItemIndex(19));
	            Keyboard.Press(BolusDose);
	            Delay.Milliseconds(100);
	            
	            //select Unit for Bolus dose if there is no any Unit field is entered
	            if (!enteredUnit) 
	            { 
	            	EnterUnit(repo.AddPainPrescription.DoseDetails.BolusUnit, repo.AddPainPrescription.DoseDetails.BolusUnitInfo, Unit);
	            	enteredUnit=true;
	            }         	
            }            
	            
            // Enter Continuous Rate
            if (repo.AddPainPrescription.DoseDetails.ContinuousRate.Visible)
            {  	
            	Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'AddPainPrescription.DoseDetails.ContinuousRate' at Center.", repo.AddPainPrescription.DoseDetails.ContinuousRateInfo, new RecordItemIndex(20));
	            repo.AddPainPrescription.DoseDetails.ContinuousRate.Click();
	            Delay.Milliseconds(200);
	            
	            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$ContinuousRate'.", new RecordItemIndex(21));
	            Keyboard.Press(ContinuousRate);
	            Delay.Milliseconds(100);
	            
	            //select Unit for Bolus dose if there is no any Unit field is entered
	            if (!enteredUnit) 
	            { 	
	            	EnterUnit(repo.AddPainPrescription.DoseDetails.RateUnit, repo.AddPainPrescription.DoseDetails.RateUnitInfo, Unit);
	            	enteredUnit=true;
	            }	            	
            }            
            
            // Enter Lockout
            if (repo.AddPainPrescription.DoseDetails.Lockout.Visible) 
            {            	
            	Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'AddPainPrescription.DoseDetails.Lockout' at Center.", repo.AddPainPrescription.DoseDetails.LockoutInfo, new RecordItemIndex(22));
	            repo.AddPainPrescription.DoseDetails.Lockout.Click();
	            Delay.Milliseconds(200);
	            
	            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Lockout'.", new RecordItemIndex(23));
	            Keyboard.Press(Lockout);
	            Delay.Milliseconds(100);
	            
	            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Enter' Press.", new RecordItemIndex(24));
	            Keyboard.Press(System.Windows.Forms.Keys.Return, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
	            Delay.Milliseconds(0);
            }           
	            
            // Enter Dose Limit Hour
            if (repo.AddPainPrescription.DoseDetails.DoseLimitHours.Visible)
            {            	
            	Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'AddPainPrescription.DoseDetails.DoseLimitHours' at Center.", repo.AddPainPrescription.DoseDetails.DoseLimitHoursInfo, new RecordItemIndex(25));
	            repo.AddPainPrescription.DoseDetails.DoseLimitHours.Click();
	            Delay.Milliseconds(200);
	            
	            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$HourDose'.", new RecordItemIndex(26));
	            Keyboard.Press(HourDose);
	            Delay.Milliseconds(100);
	            
	            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Enter' Press.", new RecordItemIndex(27));
	            Keyboard.Press(System.Windows.Forms.Keys.Return, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
	            Delay.Milliseconds(0);
            }           
	            
            // Enter Dose Limit
            if (repo.AddPainPrescription.DoseDetails.DoseLimit.Visible) 
            {            	
            	Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'AddPainPrescription.DoseDetails.DoseLimit' at Center.", repo.AddPainPrescription.DoseDetails.DoseLimitInfo, new RecordItemIndex(28));
	            repo.AddPainPrescription.DoseDetails.DoseLimit.DoubleClick();
	            Delay.Milliseconds(200);
	            
	            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$HrDoseLimit'.", new RecordItemIndex(29));
	            Keyboard.Press(HrDoseLimit);
	            Delay.Milliseconds(100);  
	            
	            //select Unit for Bolus dose if there is no any Unit field is entered
	            if (!enteredUnit) 
	            {
                  EnterUnit(repo.AddPainPrescription.DoseDetails.DoseLimitUnit, repo.AddPainPrescription.DoseDetails.DoseLimitUnitInfo, Unit);
                  enteredUnit=true;
	            }            	
             }             
            
            // Enter Instructions
            if (repo.AddPainPrescription.DoseDetails.InstructionsInfo.Exists(2000) && repo.AddPainPrescription.DoseDetails.Instructions.Visible)
            {	            	
	            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'AddPainPrescription.DoseDetails.Instructions' at Center.", repo.AddPainPrescription.DoseDetails.InstructionsInfo, new RecordItemIndex(31));
	            repo.AddPainPrescription.DoseDetails.Instructions.Click();
	            Delay.Milliseconds(200);
	            
	            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '$Instruction'.", new RecordItemIndex(32));
	            Keyboard.Press(Instruction);
	            Delay.Milliseconds(0);  
            }                     
        }
        
        private void EnterUnit(Ranorex.ComboBox item, RepoItemInfo itemInfor, string Unit)
        {
        	 // Enter Loading Dose Unit
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item '" + item +"' at Center.", itemInfor, new RecordItemIndex(14));
            item.DoubleClick();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Back' Press.", new RecordItemIndex(15));
            Keyboard.Press(System.Windows.Forms.Keys.Back, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Unit'.", new RecordItemIndex(16));
            Keyboard.Press(Unit);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Enter' Press.", new RecordItemIndex(17));
            Keyboard.Press(System.Windows.Forms.Keys.Return, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);  
        
        }
        
        //Only for Regional Second Infusion
        private void Enter_SecondInfusion_Details(string LoadingDose2, string BolusDose2, string ContinuousRate2, string Lockout2, string HourDose2, string HrDoseLimit2, string Unit, string Instructions2, string SecondInfusion)
        {
       		 if (SecondInfusion=="Yes") 
		     {
       		 	// Prescribe Second Infusion (catheter)
       		 	Ranorex.Report.Info("Click Prescribe Second Infusion (catheter) button");
       		 	repo.AddPainPrescription.RegionalInfusion.SecondInfusionButton.Click();
       		 	Delay.Milliseconds(200);
       		 	
        	    // Enter Loading Dose 2
        		if (repo.AddPainPrescription.RegionalInfusion.Infusion2Details.LoadingDose2.Visible)
        		{
	        		Report.Log(ReportLevel.Info, "Mouse", "Click item 'AddPainPrescription.RegionalInfusion.Infusion2Details.LoadingDose2'.", repo.AddPainPrescription.RegionalInfusion.Infusion2Details.LoadingDose2Info, new RecordItemIndex(12));
	                repo.AddPainPrescription.RegionalInfusion.Infusion2Details.LoadingDose2.Click();
	                Delay.Milliseconds(200);
	            
	                Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$LoadingDose2'.", new RecordItemIndex(13));
	                Keyboard.Press(LoadingDose2);
	                Delay.Milliseconds(100);
	                
	                //select Unit for loading dose
	                if (!enteredUnit) {
	               	EnterUnit( repo.AddPainPrescription.RegionalInfusion.Infusion2Details.LoadingUnit2, repo.AddPainPrescription.RegionalInfusion.Infusion2Details.LoadingUnit2Info, Unit);
	                enteredUnit=true;
	               }
	                
        	    }
            
	            // Enter Bolus Dose 2
	            if (repo.AddPainPrescription.RegionalInfusion.Infusion2Details.BolusDose2.Visible)
	            {
	            	
	            	Report.Log(ReportLevel.Info, "Mouse", "Click item 'AddPainPrescription.RegionalInfusion.Infusion2Details.BolusDose2'.", repo.AddPainPrescription.RegionalInfusion.Infusion2Details.BolusDose2Info, new RecordItemIndex(18));
		            repo.AddPainPrescription.RegionalInfusion.Infusion2Details.BolusDose2.Click();
		            Delay.Milliseconds(200);
		            
		            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$BolusDose2'.", new RecordItemIndex(19));
		            Keyboard.Press(BolusDose2);
		            Delay.Milliseconds(100);
		            
		            //select Unit for Bolus dose if there is no any Unit field is entered
		            if (!enteredUnit) {
	               	EnterUnit( repo.AddPainPrescription.RegionalInfusion.Infusion2Details.BolusUnit2, repo.AddPainPrescription.RegionalInfusion.Infusion2Details.BolusUnit2Info, Unit);
	                enteredUnit=true;
	               }
	            	
	            }            
	            
	            // Enter Continuous Rate 2
	            if (repo.AddPainPrescription.RegionalInfusion.Infusion2Details.Rate2.Visible)
	            {
	            	
	            	Report.Log(ReportLevel.Info, "Mouse", "Click item 'AddPainPrescription.RegionalInfusion.Infusion2Details.Rate2'.", repo.AddPainPrescription.RegionalInfusion.Infusion2Details.Rate2Info, new RecordItemIndex(20));
		            repo.AddPainPrescription.RegionalInfusion.Infusion2Details.Rate2.Click();
		            Delay.Milliseconds(200);
		            
		            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$ContinuousRate2'.", new RecordItemIndex(21));
		            Keyboard.Press(ContinuousRate2);
		            Delay.Milliseconds(100);
		            
		            //select Unit for Bolus dose if there is no any Unit field is entered
		            if (!enteredUnit) {
		               	EnterUnit( repo.AddPainPrescription.RegionalInfusion.Infusion2Details.RateUnit2, repo.AddPainPrescription.RegionalInfusion.Infusion2Details.RateUnit2Info, Unit);
		                enteredUnit=true;
	                }            	
	            }            
            
	            // Enter Lockout 2
	            if (repo.AddPainPrescription.RegionalInfusion.Infusion2Details.Lockout2.Visible) 
	            {            	
	            	Report.Log(ReportLevel.Info, "Mouse", "Click item 'AddPainPrescription.RegionalInfusion.Infusion2Details.Lockout2'.", repo.AddPainPrescription.RegionalInfusion.Infusion2Details.Lockout2Info, new RecordItemIndex(22));
		            repo.AddPainPrescription.RegionalInfusion.Infusion2Details.Lockout2.Click();
		            Delay.Milliseconds(200);
		            
		            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Lockout2'.", new RecordItemIndex(23));
		            Keyboard.Press(Lockout2);
		            Delay.Milliseconds(100);
		            
		            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Enter' Press.", new RecordItemIndex(24));
		            Keyboard.Press(System.Windows.Forms.Keys.Return, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
		            Delay.Milliseconds(0);
	            }           
	            
	            // Enter Dose Limit Hour 2
	            if (repo.AddPainPrescription.RegionalInfusion.Infusion2Details.DoseLimitHours2.Visible)
	            {            	
	            	Report.Log(ReportLevel.Info, "Mouse", "Click item 'AddPainPrescription.RegionalInfusion.Infusion2Details.DoseLimitHours2' ", repo.AddPainPrescription.RegionalInfusion.Infusion2Details.DoseLimitHours2Info, new RecordItemIndex(25));
		            repo.AddPainPrescription.RegionalInfusion.Infusion2Details.DoseLimitHours2.Click();
		            Delay.Milliseconds(200);
		            
		            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$HourDose2'.", new RecordItemIndex(26));
		            Keyboard.Press(HourDose2);
		            Delay.Milliseconds(100);
		            
		            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Enter' Press.", new RecordItemIndex(27));
		            Keyboard.Press(System.Windows.Forms.Keys.Return, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
		            Delay.Milliseconds(0);
	            }           
	            
	            // Enter Dose Limit 2
	            if (repo.AddPainPrescription.RegionalInfusion.Infusion2Details.DoseLimit2.Visible) 
	            {            	
	            	Report.Log(ReportLevel.Info, "Mouse", "Click item 'AddPainPrescription.RegionalInfusion.Infusion2Details.DoseLimit2'.", repo.AddPainPrescription.RegionalInfusion.Infusion2Details.DoseLimit2Info, new RecordItemIndex(28));
		            repo.AddPainPrescription.RegionalInfusion.Infusion2Details.DoseLimit2.DoubleClick();
		            Delay.Milliseconds(200);
		            
		            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$HrDoseLimit2'.", new RecordItemIndex(29));
		            Keyboard.Press(HrDoseLimit2);
		            Delay.Milliseconds(100);  
		            
		            //select Unit for Bolus dose if there is no any Unit field is entered
		            if (!enteredUnit) 
		            {
	                  EnterUnit(repo.AddPainPrescription.RegionalInfusion.Infusion2Details.DoseLimitUnit2, repo.AddPainPrescription.RegionalInfusion.Infusion2Details.DoseLimitUnit2Info, Unit);
	                  enteredUnit=true;
		            }            	
	             }             
            
	            // Enter Instructions 2
	            if (repo.AddPainPrescription.RegionalInfusion.Infusion2Details.Instructions2Info.Exists(2000) && repo.AddPainPrescription.RegionalInfusion.Infusion2Details.Instructions2.Visible)
	            {	            	
		            Report.Log(ReportLevel.Info, "Mouse", "Click item 'AddPainPrescription.RegionalInfusion.Infusion2Details.Instructions2' .", repo.AddPainPrescription.RegionalInfusion.Infusion2Details.Instructions2Info, new RecordItemIndex(31));
		            repo.AddPainPrescription.RegionalInfusion.Infusion2Details.Instructions2.Click();
		            Delay.Milliseconds(200);
		            
		            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '$Instruction2'.", new RecordItemIndex(32));
		            Keyboard.Press(Instruction2);
		            Delay.Milliseconds(0);                       	
	            }
       		 }
        }          
    }
}
