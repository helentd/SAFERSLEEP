///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SAFERsleep.Recordings.PainPrescriptions.AddPainPrescriptionWindow.NewMedication
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The AddNewMedication recording.
    /// </summary>
    [TestModule("dbd08ff1-1e55-4576-94f1-31e65afc7244", ModuleType.Recording, 1)]
    public partial class AddNewMedication : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SAFERsleep.SAFERsleepORRepository repository.
        /// </summary>
        public static SAFERsleep.SAFERsleepORRepository repo = SAFERsleep.SAFERsleepORRepository.Instance;

        static AddNewMedication instance = new AddNewMedication();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public AddNewMedication()
        {
            Drug1 = "";
            Drug2 = "";
            Drug3 = "";
            Dose1 = "";
            Dose2 = "";
            Dose3 = "";
            Unit1 = "";
            Unit2 = "";
            Unit3 = "";
            Volume = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static AddNewMedication Instance
        {
            get { return instance; }
        }

#region Variables

        string _Drug1;

        /// <summary>
        /// Gets or sets the value of variable Drug1.
        /// </summary>
        [TestVariable("52d4f46c-a2cf-42f1-83c8-2ce155850f0d")]
        public string Drug1
        {
            get { return _Drug1; }
            set { _Drug1 = value; }
        }

        string _Drug2;

        /// <summary>
        /// Gets or sets the value of variable Drug2.
        /// </summary>
        [TestVariable("d9a414cb-f9d8-470d-b41a-12f7eee65038")]
        public string Drug2
        {
            get { return _Drug2; }
            set { _Drug2 = value; }
        }

        string _Drug3;

        /// <summary>
        /// Gets or sets the value of variable Drug3.
        /// </summary>
        [TestVariable("7e1b609b-32aa-4dc7-b3a0-6ab57cc5203d")]
        public string Drug3
        {
            get { return _Drug3; }
            set { _Drug3 = value; }
        }

        string _Dose1;

        /// <summary>
        /// Gets or sets the value of variable Dose1.
        /// </summary>
        [TestVariable("6315da3c-c63a-4c1c-849b-547dd53959c1")]
        public string Dose1
        {
            get { return _Dose1; }
            set { _Dose1 = value; }
        }

        string _Dose2;

        /// <summary>
        /// Gets or sets the value of variable Dose2.
        /// </summary>
        [TestVariable("e99546aa-1ef3-4714-a4ad-a1b6f94fd3da")]
        public string Dose2
        {
            get { return _Dose2; }
            set { _Dose2 = value; }
        }

        string _Dose3;

        /// <summary>
        /// Gets or sets the value of variable Dose3.
        /// </summary>
        [TestVariable("046d6ceb-c3ee-478c-b7e1-5b35ae0c25c0")]
        public string Dose3
        {
            get { return _Dose3; }
            set { _Dose3 = value; }
        }

        string _Unit1;

        /// <summary>
        /// Gets or sets the value of variable Unit1.
        /// </summary>
        [TestVariable("5c748b67-e79d-4a76-bea1-4f0fd841e925")]
        public string Unit1
        {
            get { return _Unit1; }
            set { _Unit1 = value; }
        }

        string _Unit2;

        /// <summary>
        /// Gets or sets the value of variable Unit2.
        /// </summary>
        [TestVariable("65c54ea4-f776-4037-8a54-fc6b7355f02a")]
        public string Unit2
        {
            get { return _Unit2; }
            set { _Unit2 = value; }
        }

        string _Unit3;

        /// <summary>
        /// Gets or sets the value of variable Unit3.
        /// </summary>
        [TestVariable("9daa9988-e688-4399-95e7-2dab9473b74f")]
        public string Unit3
        {
            get { return _Unit3; }
            set { _Unit3 = value; }
        }

        string _Volume;

        /// <summary>
        /// Gets or sets the value of variable Volume.
        /// </summary>
        [TestVariable("b6597710-5003-4848-a74b-c2728e835327")]
        public string Volume
        {
            get { return _Volume; }
            set { _Volume = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable FormName.
        /// </summary>
        [TestVariable("177a8e11-f912-45b7-bebc-eda0b3869398")]
        public string FormName
        {
            get { return repo.FormName; }
            set { repo.FormName = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'AddPainPrescription.AddNewMedication' at Center.", repo.AddPainPrescription.AddNewMedicationInfo, new RecordItemIndex(0));
            repo.AddPainPrescription.AddNewMedication.Click();
            Delay.Milliseconds(200);
            
            UserCodeCollection_OR.Clear_TextBox(repo.AddNewPainMedication.Drug1Info, "Combobox");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Drug1'.", new RecordItemIndex(2));
            Keyboard.Press(Drug1);
            Delay.Milliseconds(100);
            
            UserCodeCollection_OR.Clear_TextBox(repo.AddNewPainMedication.Dose1Info, "Text");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Dose1'.", new RecordItemIndex(4));
            Keyboard.Press(Dose1);
            Delay.Milliseconds(100);
            
            UserCodeCollection_OR.Clear_TextBox(repo.AddNewPainMedication.Unit1Info, "Combobox");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Unit1'.", new RecordItemIndex(6));
            Keyboard.Press(Unit1);
            Delay.Milliseconds(100);
            
            UserCodeCollection_OR.Clear_TextBox(repo.AddNewPainMedication.Drug2Info, "Combobox");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Drug2'.", new RecordItemIndex(8));
            Keyboard.Press(Drug2);
            Delay.Milliseconds(100);
            
            UserCodeCollection_OR.Clear_TextBox(repo.AddNewPainMedication.Dose2Info, "Text");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Dose2'.", new RecordItemIndex(10));
            Keyboard.Press(Dose2);
            Delay.Milliseconds(100);
            
            UserCodeCollection_OR.Clear_TextBox(repo.AddNewPainMedication.Unit2Info, "Combobox");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Unit2'.", new RecordItemIndex(12));
            Keyboard.Press(Unit2);
            Delay.Milliseconds(100);
            
            UserCodeCollection_OR.Clear_TextBox(repo.AddNewPainMedication.Drug3Info, "Combobox");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Drug3'.", new RecordItemIndex(14));
            Keyboard.Press(Drug3);
            Delay.Milliseconds(100);
            
            UserCodeCollection_OR.Clear_TextBox(repo.AddNewPainMedication.Dose3Info, "Text");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Dose3'.", new RecordItemIndex(16));
            Keyboard.Press(Dose3);
            Delay.Milliseconds(100);
            
            UserCodeCollection_OR.Clear_TextBox(repo.AddNewPainMedication.Unit3Info, "Combobox");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Unit3'.", new RecordItemIndex(18));
            Keyboard.Press(Unit3);
            Delay.Milliseconds(100);
            
            UserCodeCollection_OR.Clear_TextBox(repo.AddNewPainMedication.VolumeInfo, "Text");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Volume'.", new RecordItemIndex(20));
            Keyboard.Press(Volume);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'AddNewPainMedication.ButtonOK' at Center.", repo.AddNewPainMedication.ButtonOKInfo, new RecordItemIndex(21));
            repo.AddNewPainMedication.ButtonOK.Click();
            Delay.Milliseconds(200);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
