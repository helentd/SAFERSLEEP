///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SAFERsleep.Recordings.RegionalBlock
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The SelectBlockName recording.
    /// </summary>
    [TestModule("a4e0bead-a1ed-49fb-8fa5-2525ac10ce33", ModuleType.Recording, 1)]
    public partial class SelectBlockName : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SAFERsleep.SAFERsleepORRepository repository.
        /// </summary>
        public static SAFERsleep.SAFERsleepORRepository repo = SAFERsleep.SAFERsleepORRepository.Instance;

        static SelectBlockName instance = new SelectBlockName();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public SelectBlockName()
        {
            BlockName = "Epidural";
            BlockSite = "Cervical";
            PatientPosition = "Sitting";
            IsNeuroaxialBlock = "Yes";
            BlockLevel = "1-2";
            BlockSide = "Left";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static SelectBlockName Instance
        {
            get { return instance; }
        }

#region Variables

        string _PatientPosition;

        /// <summary>
        /// Gets or sets the value of variable PatientPosition.
        /// </summary>
        [TestVariable("8f137f58-7747-4527-8418-7eca0f29e486")]
        public string PatientPosition
        {
            get { return _PatientPosition; }
            set { _PatientPosition = value; }
        }

        string _IsNeuroaxialBlock;

        /// <summary>
        /// Gets or sets the value of variable IsNeuroaxialBlock.
        /// </summary>
        [TestVariable("c89bd651-ae47-48dc-a4e3-f4934e0752ec")]
        public string IsNeuroaxialBlock
        {
            get { return _IsNeuroaxialBlock; }
            set { _IsNeuroaxialBlock = value; }
        }

        string _BlockLevel;

        /// <summary>
        /// Gets or sets the value of variable BlockLevel.
        /// </summary>
        [TestVariable("953d0121-54f9-47c5-9fc0-ad0615faa3e4")]
        public string BlockLevel
        {
            get { return _BlockLevel; }
            set { _BlockLevel = value; }
        }

        string _BlockSide;

        /// <summary>
        /// Gets or sets the value of variable BlockSide.
        /// </summary>
        [TestVariable("ba9cc86c-d855-44ad-9cfc-290f5fff3ffd")]
        public string BlockSide
        {
            get { return _BlockSide; }
            set { _BlockSide = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable BlockName.
        /// </summary>
        [TestVariable("9898a3b2-e726-4192-9102-9eba6740d791")]
        public string BlockName
        {
            get { return repo.BlockName; }
            set { repo.BlockName = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable BlockSite.
        /// </summary>
        [TestVariable("a755640f-fb6a-4695-ab5b-7aeb161b8ed2")]
        public string BlockSite
        {
            get { return repo.BlockSite; }
            set { repo.BlockSite = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            UserCodeCollection_OR.Clear_TextBox(repo.AddRegionalBlock.BlockNameInfo, "Combobox");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$BlockName'.", new RecordItemIndex(1));
            Keyboard.Press(BlockName);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Enter' Press.", new RecordItemIndex(2));
            Keyboard.Press(System.Windows.Forms.Keys.Return, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            UserCodeCollection_OR.Clear_TextBox(repo.AddRegionalBlock.BlockSiteInfo, "Combobox");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$BlockSite'.", new RecordItemIndex(4));
            Keyboard.Press(BlockSite);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Enter' Press.", new RecordItemIndex(5));
            Keyboard.Press(System.Windows.Forms.Keys.Return, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            SelectLevelSide(IsNeuroaxialBlock, BlockLevel, BlockSide);
            Delay.Milliseconds(0);
            
            UserCodeCollection_OR.Clear_TextBox(repo.AddRegionalBlock.PatientPositionInfo, "Combobox");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$PatientPosition'.", new RecordItemIndex(8));
            Keyboard.Press(PatientPosition);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Enter' Press.", new RecordItemIndex(9));
            Keyboard.Press(System.Windows.Forms.Keys.Return, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
