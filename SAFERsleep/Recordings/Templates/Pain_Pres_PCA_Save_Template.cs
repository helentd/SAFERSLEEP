///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SAFERsleep.Recordings.Templates
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Pain_Pres_PCA_Save_Template recording.
    /// </summary>
    [TestModule("500644cc-6263-4b63-a121-b95987c48473", ModuleType.Recording, 1)]
    public partial class Pain_Pres_PCA_Save_Template : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SAFERsleep.SAFERsleepORRepository repository.
        /// </summary>
        public static SAFERsleep.SAFERsleepORRepository repo = SAFERsleep.SAFERsleepORRepository.Instance;

        static Pain_Pres_PCA_Save_Template instance = new Pain_Pres_PCA_Save_Template();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Pain_Pres_PCA_Save_Template()
        {
            TemplateName = "Auto PCA Pain Prescription";
            MedicationName = "Fentanyl 10 mcg/ml 1,000 mcg (Total Volume: 100 ml)";
            Route = "IV";
            Mode = "Bolus dose with continuous infusion";
            Dose = "40";
            Unit = "ml";
            ContinuousRate = "10";
            ContinuousRateUnit = "ml/hr";
            Lockout = "5";
            Hour = "1";
            DoseLimit = "20";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Pain_Pres_PCA_Save_Template Instance
        {
            get { return instance; }
        }

#region Variables

        string _MedicationName;

        /// <summary>
        /// Gets or sets the value of variable MedicationName.
        /// </summary>
        [TestVariable("5edc14a3-1598-4417-aeaf-b29f93869c71")]
        public string MedicationName
        {
            get { return _MedicationName; }
            set { _MedicationName = value; }
        }

        string _Mode;

        /// <summary>
        /// Gets or sets the value of variable Mode.
        /// </summary>
        [TestVariable("f7857032-22b4-4982-9df6-6e3914ea1517")]
        public string Mode
        {
            get { return _Mode; }
            set { _Mode = value; }
        }

        string _Dose;

        /// <summary>
        /// Gets or sets the value of variable Dose.
        /// </summary>
        [TestVariable("6515a151-5053-46e3-82c3-26814e94c20d")]
        public string Dose
        {
            get { return _Dose; }
            set { _Dose = value; }
        }

        string _Unit;

        /// <summary>
        /// Gets or sets the value of variable Unit.
        /// </summary>
        [TestVariable("1ae1651b-069c-472d-a525-7ac421d61bf8")]
        public string Unit
        {
            get { return _Unit; }
            set { _Unit = value; }
        }

        string _ContinuousRate;

        /// <summary>
        /// Gets or sets the value of variable ContinuousRate.
        /// </summary>
        [TestVariable("9b05756b-1c47-4d52-8a06-1162d4d1ba8a")]
        public string ContinuousRate
        {
            get { return _ContinuousRate; }
            set { _ContinuousRate = value; }
        }

        string _ContinuousRateUnit;

        /// <summary>
        /// Gets or sets the value of variable ContinuousRateUnit.
        /// </summary>
        [TestVariable("4b923e38-2d55-4759-95f7-d436e733f093")]
        public string ContinuousRateUnit
        {
            get { return _ContinuousRateUnit; }
            set { _ContinuousRateUnit = value; }
        }

        string _Lockout;

        /// <summary>
        /// Gets or sets the value of variable Lockout.
        /// </summary>
        [TestVariable("84ef6c1e-0966-478e-a7a2-058ebd644331")]
        public string Lockout
        {
            get { return _Lockout; }
            set { _Lockout = value; }
        }

        string _Hour;

        /// <summary>
        /// Gets or sets the value of variable Hour.
        /// </summary>
        [TestVariable("8b83e34b-1bdc-4041-94dc-36d83270b6bb")]
        public string Hour
        {
            get { return _Hour; }
            set { _Hour = value; }
        }

        string _DoseLimit;

        /// <summary>
        /// Gets or sets the value of variable DoseLimit.
        /// </summary>
        [TestVariable("9723dace-acf4-4b9c-be4c-92e3a5de6f5b")]
        public string DoseLimit
        {
            get { return _DoseLimit; }
            set { _DoseLimit = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable TemplateName.
        /// </summary>
        [TestVariable("b1aac5cb-1aa5-451b-9c9c-a632584e04e0")]
        public string TemplateName
        {
            get { return repo.TemplateName; }
            set { repo.TemplateName = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Route.
        /// </summary>
        [TestVariable("44695878-3164-4af5-b820-5a6c5d653dc0")]
        public string Route
        {
            get { return repo.Route; }
            set { repo.Route = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmORMain.Templates' at Center.", repo.FrmORMain.TemplatesInfo, new RecordItemIndex(0));
            repo.FrmORMain.Templates.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Templates.TemplatesForm.SaveCurrentScreenAsTemplate' at Center.", repo.Templates.TemplatesForm.SaveCurrentScreenAsTemplateInfo, new RecordItemIndex(1));
            repo.Templates.TemplatesForm.SaveCurrentScreenAsTemplate.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Back' Press.", new RecordItemIndex(2));
            Keyboard.Press(System.Windows.Forms.Keys.Back, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SaveTemplate.TemplateName' at Center.", repo.SaveTemplate.TemplateNameInfo, new RecordItemIndex(3));
            repo.SaveTemplate.TemplateName.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$TemplateName'.", new RecordItemIndex(4));
            Keyboard.Press(TemplateName);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(5));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SaveTemplate.ButtonOK' at Center.", repo.SaveTemplate.ButtonOKInfo, new RecordItemIndex(6));
            repo.SaveTemplate.ButtonOK.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Templates.TemplatesForm.TemplateListItem' at Center.", repo.Templates.TemplatesForm.TemplateListItemInfo, new RecordItemIndex(7));
            repo.Templates.TemplatesForm.TemplateListItem.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Templates.TemplatesForm.ViewTemplate' at Center.", repo.Templates.TemplatesForm.ViewTemplateInfo, new RecordItemIndex(8));
            repo.Templates.TemplatesForm.ViewTemplate.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'TemplateAdministration.PCA.PCAIntravenousTab' at Center.", repo.TemplateAdministration.PCA.PCAIntravenousTabInfo, new RecordItemIndex(9));
            repo.TemplateAdministration.PCA.PCAIntravenousTab.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$MedicationName) on item 'TemplateAdministration.PCA.PCAMedication'.", repo.TemplateAdministration.PCA.PCAMedicationInfo, new RecordItemIndex(10));
            Validate.AttributeEqual(repo.TemplateAdministration.PCA.PCAMedicationInfo, "Text", MedicationName);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Route) on item 'TemplateAdministration.PCA.PCARoute'.", repo.TemplateAdministration.PCA.PCARouteInfo, new RecordItemIndex(11));
            Validate.AttributeEqual(repo.TemplateAdministration.PCA.PCARouteInfo, "Text", Route);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Mode) on item 'TemplateAdministration.PCA.PCAMode'.", repo.TemplateAdministration.PCA.PCAModeInfo, new RecordItemIndex(12));
            Validate.AttributeEqual(repo.TemplateAdministration.PCA.PCAModeInfo, "Text", Mode);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Dose) on item 'TemplateAdministration.PCA.PCADose'.", repo.TemplateAdministration.PCA.PCADoseInfo, new RecordItemIndex(13));
            Validate.AttributeEqual(repo.TemplateAdministration.PCA.PCADoseInfo, "Text", Dose);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Unit) on item 'TemplateAdministration.PCA.PCAUnit'.", repo.TemplateAdministration.PCA.PCAUnitInfo, new RecordItemIndex(14));
            Validate.AttributeEqual(repo.TemplateAdministration.PCA.PCAUnitInfo, "Text", Unit);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$ContinuousRate) on item 'TemplateAdministration.PCA.PCAContinuousRate'.", repo.TemplateAdministration.PCA.PCAContinuousRateInfo, new RecordItemIndex(15));
            Validate.AttributeEqual(repo.TemplateAdministration.PCA.PCAContinuousRateInfo, "Text", ContinuousRate);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$ContinuousRateUnit) on item 'TemplateAdministration.PCA.PCAContinuousRateUnit'.", repo.TemplateAdministration.PCA.PCAContinuousRateUnitInfo, new RecordItemIndex(16));
            Validate.AttributeEqual(repo.TemplateAdministration.PCA.PCAContinuousRateUnitInfo, "Text", ContinuousRateUnit);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Lockout) on item 'TemplateAdministration.PCA.PCALockout'.", repo.TemplateAdministration.PCA.PCALockoutInfo, new RecordItemIndex(17));
            Validate.AttributeEqual(repo.TemplateAdministration.PCA.PCALockoutInfo, "Text", Lockout);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Hour) on item 'TemplateAdministration.PCA.PCAHour'.", repo.TemplateAdministration.PCA.PCAHourInfo, new RecordItemIndex(18));
            Validate.AttributeEqual(repo.TemplateAdministration.PCA.PCAHourInfo, "Text", Hour);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$DoseLimit) on item 'TemplateAdministration.PCA.PCAHrDoseLimit'.", repo.TemplateAdministration.PCA.PCAHrDoseLimitInfo, new RecordItemIndex(19));
            Validate.AttributeEqual(repo.TemplateAdministration.PCA.PCAHrDoseLimitInfo, "Text", DoseLimit);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'TemplateAdministration.ButtonClose' at Center.", repo.TemplateAdministration.ButtonCloseInfo, new RecordItemIndex(20));
            repo.TemplateAdministration.ButtonClose.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Templates.TemplatesForm.Close' at Center.", repo.Templates.TemplatesForm.CloseInfo, new RecordItemIndex(21));
            repo.Templates.TemplatesForm.Close.Click();
            Delay.Milliseconds(200);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
