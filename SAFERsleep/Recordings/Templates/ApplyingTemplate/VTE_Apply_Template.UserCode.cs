///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace SAFERsleep.Recordings.Templates.ApplyingTemplate
{
    public partial class VTE_Apply_Template
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }
        
        private string Risk;
        private string AssessmentSummary;
        
        public void GetTemplateValues()
        {
        	Ranorex.Report.Info("Getting the values of Risk, and Summary");
        	Risk = repo.TemplateAdministration.VTERiskType.TextValue;
        	AssessmentSummary = repo.TemplateAdministration.VTEAssessment.TextValue;
        	Delay.Milliseconds(200);
        }
        
        public void ValidateTemplateApplied()
        {
        	Ranorex.Report.Info("Checking values applied from the Template");
        	
        	if (Risk == "Low")
        		Validate.IsTrue(repo.FrmORMain.Patient_Details.VTE.LowRisk.Pressed);
        	else if (Risk == "Moderate")
        		Validate.IsTrue(repo.FrmORMain.Patient_Details.VTE.ModerateRisk.Pressed);
        	else if (Risk == "High")
        		Validate.IsTrue(repo.FrmORMain.Patient_Details.VTE.HighRisk.Pressed);
        	  	
        	Validate.AreEqual(repo.FrmORMain.Patient_Details.VTE.VTEAssessmentSummary.TextValue, AssessmentSummary);
        	Validate.Exists(repo.FrmORMain.Patient_Details.VTE.VTEListItem);
        	Delay.Milliseconds(200);
        }

    }
}
