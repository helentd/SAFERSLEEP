///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace SAFERsleep.Recordings.Templates.ApplyingTemplate
{
    public partial class Pain_Pres_Regional_Apply_Template
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }
        
        private string medication;
        private string unit;
        
        private string loadingdose1;
        private string bolusdose1;
		private string rate1;
		private string lockout1;
		private string hour1;
		private string doselimit1;
		private string instructions1;
		
		private string loadingdose2;
		private string bolusdose2;
		private string rate2;
		private string lockout2;
		private string hour2;
		private string doselimit2;
		private string instructions2;
		
		public void GetInfusion1TemplateValues()
		{
			Ranorex.Report.Info("Getting the values of Regional Infusion 1 Template");
			
			medication = repo.TemplateAdministration.RegionalInfusion.Infusion1Medication.TextValue;
			unit = repo.TemplateAdministration.RegionalInfusion.Infusion1Unit.TextValue;
			
			loadingdose1 = repo.TemplateAdministration.RegionalInfusion.Infusion1LoadingDose.TextValue;
			bolusdose1 = repo.TemplateAdministration.RegionalInfusion.Infusion1Bolus.TextValue;
			rate1 = repo.TemplateAdministration.RegionalInfusion.Infusion1Rate.TextValue;
			lockout1 = repo.TemplateAdministration.RegionalInfusion.Infusion1Lockout.TextValue;
			hour1 = repo.TemplateAdministration.RegionalInfusion.Infusion1Hour.TextValue;
			doselimit1 = repo.TemplateAdministration.RegionalInfusion.Infusion1DoseLimit.TextValue;
			instructions1 = repo.TemplateAdministration.RegionalInfusion.Infustion1Instructions.TextValue;
			
			Delay.Milliseconds(200);
		}
		
		public void GetInfusion2TemplateValues()
		{
			Ranorex.Report.Info("Getting the values of Regional Infusion 2 Template");		
			loadingdose2 = repo.TemplateAdministration.RegionalInfusion.Infusion2LoadingDose.TextValue;
			bolusdose2 = repo.TemplateAdministration.RegionalInfusion.Infusion2Bolus.TextValue;
			rate2 = repo.TemplateAdministration.RegionalInfusion.Infusion2Rate.TextValue;
			lockout2 = repo.TemplateAdministration.RegionalInfusion.Infusion2Lockout.TextValue;
			hour2 = repo.TemplateAdministration.RegionalInfusion.Infusion2Hour.TextValue;
			doselimit2 = repo.TemplateAdministration.RegionalInfusion.Infusion2DoseLimit.TextValue;
			instructions2 = repo.TemplateAdministration.RegionalInfusion.Infusion2Instructions.TextValue;
			Delay.Milliseconds(200);
		}
		
		public void ValidateInfusion1Applied()
		{
			Ranorex.Report.Info("Checking Infusion 1 values applied from the Template");
			if (medication != null)
        	{
        		Ranorex.Report.Info("Checking Medication"); 
        		Validate.IsTrue(repo.FrmORMain.PainPrescriptions.AddedPrescription.Text.Contains(medication));
        		Delay.Milliseconds(200);
        	}        	
        	
        	if (loadingdose1 != null)
        	{
        		Ranorex.Report.Info("Checking Loading Dose");
        		Validate.IsTrue(repo.FrmORMain.PainPrescriptions.AddedPrescription.Text.Contains("Loading Dose: "+loadingdose1+" "+unit));
        		Delay.Milliseconds(200);
        	}        	
        	
        	if (bolusdose1 != null)
        	{
        		Ranorex.Report.Info("Checking Bolus Dose");
        		Validate.IsTrue(repo.FrmORMain.PainPrescriptions.AddedPrescription.Text.Contains("Bolus Dose: "+bolusdose1+" "+unit));
        		Delay.Milliseconds(200);
        	}        	
        	
        	if (rate1 != null)
        	{
        		Ranorex.Report.Info("Checking Continuous Rate");
        		Validate.IsTrue(repo.FrmORMain.PainPrescriptions.AddedPrescription.Text.Contains("Continuous Rate: "+rate1+" "+unit+"/hr"));
        		Delay.Milliseconds(200);
        	}
        	
        	if (lockout1 != null)
        	{
        		Ranorex.Report.Info("Checking Lockout");
        		Validate.IsTrue(repo.FrmORMain.PainPrescriptions.AddedPrescription.Text.Contains("Lockout (minutes): "+lockout1));
        		Delay.Milliseconds(200);
        	}
        	
        	if (hour1 != null && doselimit1 != null)
        	{
        		Ranorex.Report.Info("Checking Hour Dose Limit");
        		Validate.IsTrue(repo.FrmORMain.PainPrescriptions.AddedPrescription.Text.Contains(hour1+" hour dose limit: "+doselimit1+" "+unit));
        		Delay.Milliseconds(200);
        	}
        	
        	if (instructions1 != null)
        	{
        		Ranorex.Report.Info("Checking Instructions");
        		Validate.IsTrue(repo.FrmORMain.PainPrescriptions.AddedPrescription.Text.Contains(instructions1));
        		Delay.Milliseconds(200);
        	}
		}
		
		public void ValidateInfusion2Applied()
		{
			Ranorex.Report.Info("Checking Infusion 2 values applied from the Template");			
			if (loadingdose2 != null)
        	{
        		Ranorex.Report.Info("Checking Loading Dose");
        		Validate.IsTrue(repo.FrmORMain.PainPrescriptions.AddedPrescription.Text.Contains("Loading Dose: "+loadingdose2+" "+unit));
        		Delay.Milliseconds(200);
        	}        	
        	
        	if (bolusdose2 != null)
        	{
        		Ranorex.Report.Info("Checking Bolus Dose");
        		Validate.IsTrue(repo.FrmORMain.PainPrescriptions.AddedPrescription.Text.Contains("Bolus Dose: "+bolusdose2+" "+unit));
        		Delay.Milliseconds(200);
        	}        	
        	
        	if (rate2 != null)
        	{
        		Ranorex.Report.Info("Checking Continuous Rate");
        		Validate.IsTrue(repo.FrmORMain.PainPrescriptions.AddedPrescription.Text.Contains("Continuous Rate: "+rate2+" "+unit+"/hr"));
        		Delay.Milliseconds(200);
        	}
        	
        	if (lockout2 != null)
        	{
        		Ranorex.Report.Info("Checking Lockout");
        		Validate.IsTrue(repo.FrmORMain.PainPrescriptions.AddedPrescription.Text.Contains("Lockout (minutes): "+lockout2));
        		Delay.Milliseconds(200);
        	}
        	
        	if (hour2 != null && doselimit2 != null)
        	{
        		Ranorex.Report.Info("Checking Hour Dose Limit");
        		Validate.IsTrue(repo.FrmORMain.PainPrescriptions.AddedPrescription.Text.Contains(hour2+" hour dose limit: "+doselimit2+" "+unit));
        		Delay.Milliseconds(200);
        	}
        	
        	if (instructions2 != null)
        	{
        		Ranorex.Report.Info("Checking Instructions");
        		Validate.IsTrue(repo.FrmORMain.PainPrescriptions.AddedPrescription.Text.Contains(instructions2));
        		Delay.Milliseconds(200);
        	}
		}
    }
}
