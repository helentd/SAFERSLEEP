///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SAFERsleep.Recordings.Templates
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Pain_Pres_PCEA_Save_Template recording.
    /// </summary>
    [TestModule("6bb4832e-cffd-4508-8ccd-5520ca74750d", ModuleType.Recording, 1)]
    public partial class Pain_Pres_PCEA_Save_Template : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SAFERsleep.SAFERsleepORRepository repository.
        /// </summary>
        public static SAFERsleep.SAFERsleepORRepository repo = SAFERsleep.SAFERsleepORRepository.Instance;

        static Pain_Pres_PCEA_Save_Template instance = new Pain_Pres_PCEA_Save_Template();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Pain_Pres_PCEA_Save_Template()
        {
            TemplateName = "Auto PCEA Pain Prescription";
            MedicationName = "Levobupivacaine 0.125%";
            Mode = "Test Mode";
            LoadingDose = "5";
            BolusDose = "6";
            Unit = "ml";
            ContinuousRate = "7";
            DoseLimit = "10";
            Hour = "1";
            Lockout = "5";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Pain_Pres_PCEA_Save_Template Instance
        {
            get { return instance; }
        }

#region Variables

        string _MedicationName;

        /// <summary>
        /// Gets or sets the value of variable MedicationName.
        /// </summary>
        [TestVariable("e8a6cf08-e980-4560-b5e2-3eccd09f98d5")]
        public string MedicationName
        {
            get { return _MedicationName; }
            set { _MedicationName = value; }
        }

        string _Mode;

        /// <summary>
        /// Gets or sets the value of variable Mode.
        /// </summary>
        [TestVariable("3193717f-7108-4032-82ba-c09d33263c6b")]
        public string Mode
        {
            get { return _Mode; }
            set { _Mode = value; }
        }

        string _LoadingDose;

        /// <summary>
        /// Gets or sets the value of variable LoadingDose.
        /// </summary>
        [TestVariable("1b4125ec-d055-4ddd-a6be-a00590853112")]
        public string LoadingDose
        {
            get { return _LoadingDose; }
            set { _LoadingDose = value; }
        }

        string _BolusDose;

        /// <summary>
        /// Gets or sets the value of variable BolusDose.
        /// </summary>
        [TestVariable("9a1caf5b-459a-4ed8-ad32-7af1d58ab17e")]
        public string BolusDose
        {
            get { return _BolusDose; }
            set { _BolusDose = value; }
        }

        string _Unit;

        /// <summary>
        /// Gets or sets the value of variable Unit.
        /// </summary>
        [TestVariable("ddce025b-4130-49ef-a619-3b8cf77dcc10")]
        public string Unit
        {
            get { return _Unit; }
            set { _Unit = value; }
        }

        string _ContinuousRate;

        /// <summary>
        /// Gets or sets the value of variable ContinuousRate.
        /// </summary>
        [TestVariable("ea8a6eea-0a48-42e3-b582-5634ee12b168")]
        public string ContinuousRate
        {
            get { return _ContinuousRate; }
            set { _ContinuousRate = value; }
        }

        string _DoseLimit;

        /// <summary>
        /// Gets or sets the value of variable DoseLimit.
        /// </summary>
        [TestVariable("7ea9e8af-a38d-41aa-96e9-cd56d2362357")]
        public string DoseLimit
        {
            get { return _DoseLimit; }
            set { _DoseLimit = value; }
        }

        string _Hour;

        /// <summary>
        /// Gets or sets the value of variable Hour.
        /// </summary>
        [TestVariable("049569db-efa7-4aab-a2d4-721a53a18d7d")]
        public string Hour
        {
            get { return _Hour; }
            set { _Hour = value; }
        }

        string _Lockout;

        /// <summary>
        /// Gets or sets the value of variable Lockout.
        /// </summary>
        [TestVariable("fab020b2-4ccf-4d1d-9ce0-8ebfe7d4f496")]
        public string Lockout
        {
            get { return _Lockout; }
            set { _Lockout = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable TemplateName.
        /// </summary>
        [TestVariable("1eda7adb-8555-4945-9088-163ed67134fd")]
        public string TemplateName
        {
            get { return repo.TemplateName; }
            set { repo.TemplateName = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmORMain.Templates' at Center.", repo.FrmORMain.TemplatesInfo, new RecordItemIndex(0));
            repo.FrmORMain.Templates.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Templates.TemplatesForm.SaveCurrentScreenAsTemplate' at Center.", repo.Templates.TemplatesForm.SaveCurrentScreenAsTemplateInfo, new RecordItemIndex(1));
            repo.Templates.TemplatesForm.SaveCurrentScreenAsTemplate.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Back' Press.", new RecordItemIndex(2));
            Keyboard.Press(System.Windows.Forms.Keys.Back, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SaveTemplate.TemplateName' at Center.", repo.SaveTemplate.TemplateNameInfo, new RecordItemIndex(3));
            repo.SaveTemplate.TemplateName.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$TemplateName'.", new RecordItemIndex(4));
            Keyboard.Press(TemplateName);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(5));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SaveTemplate.ButtonOK' at Center.", repo.SaveTemplate.ButtonOKInfo, new RecordItemIndex(6));
            repo.SaveTemplate.ButtonOK.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Templates.TemplatesForm.TemplateListItem' at Center.", repo.Templates.TemplatesForm.TemplateListItemInfo, new RecordItemIndex(7));
            repo.Templates.TemplatesForm.TemplateListItem.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Templates.TemplatesForm.ViewTemplate' at Center.", repo.Templates.TemplatesForm.ViewTemplateInfo, new RecordItemIndex(8));
            repo.Templates.TemplatesForm.ViewTemplate.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'TemplateAdministration.PCEA.EpiduralAnalgesiaTab' at Center.", repo.TemplateAdministration.PCEA.EpiduralAnalgesiaTabInfo, new RecordItemIndex(9));
            repo.TemplateAdministration.PCEA.EpiduralAnalgesiaTab.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$MedicationName) on item 'TemplateAdministration.PCEA.PCEAMedication'.", repo.TemplateAdministration.PCEA.PCEAMedicationInfo, new RecordItemIndex(10));
            Validate.AttributeEqual(repo.TemplateAdministration.PCEA.PCEAMedicationInfo, "Text", MedicationName);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Mode) on item 'TemplateAdministration.PCEA.PCEAMode'.", repo.TemplateAdministration.PCEA.PCEAModeInfo, new RecordItemIndex(11));
            Validate.AttributeEqual(repo.TemplateAdministration.PCEA.PCEAModeInfo, "Text", Mode);
            Delay.Milliseconds(0);
            
            ValidateUnits(Unit);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$LoadingDose) on item 'TemplateAdministration.PCEA.PCEALoadingDose'.", repo.TemplateAdministration.PCEA.PCEALoadingDoseInfo, new RecordItemIndex(13));
            Validate.AttributeEqual(repo.TemplateAdministration.PCEA.PCEALoadingDoseInfo, "Text", LoadingDose);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$BolusDose) on item 'TemplateAdministration.PCEA.PCEABolusDose'.", repo.TemplateAdministration.PCEA.PCEABolusDoseInfo, new RecordItemIndex(14));
            Validate.AttributeEqual(repo.TemplateAdministration.PCEA.PCEABolusDoseInfo, "Text", BolusDose);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$ContinuousRate) on item 'TemplateAdministration.PCEA.PCEAInfusionRate'.", repo.TemplateAdministration.PCEA.PCEAInfusionRateInfo, new RecordItemIndex(15));
            Validate.AttributeEqual(repo.TemplateAdministration.PCEA.PCEAInfusionRateInfo, "Text", ContinuousRate);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Hour) on item 'TemplateAdministration.PCEA.PCEAHour'.", repo.TemplateAdministration.PCEA.PCEAHourInfo, new RecordItemIndex(16));
            Validate.AttributeEqual(repo.TemplateAdministration.PCEA.PCEAHourInfo, "Text", Hour);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$DoseLimit) on item 'TemplateAdministration.PCEA.PCEADoseLimit'.", repo.TemplateAdministration.PCEA.PCEADoseLimitInfo, new RecordItemIndex(17));
            Validate.AttributeEqual(repo.TemplateAdministration.PCEA.PCEADoseLimitInfo, "Text", DoseLimit);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Lockout) on item 'TemplateAdministration.PCEA.PCEALockout'.", repo.TemplateAdministration.PCEA.PCEALockoutInfo, new RecordItemIndex(18));
            Validate.AttributeEqual(repo.TemplateAdministration.PCEA.PCEALockoutInfo, "Text", Lockout);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'TemplateAdministration.ButtonClose' at Center.", repo.TemplateAdministration.ButtonCloseInfo, new RecordItemIndex(19));
            repo.TemplateAdministration.ButtonClose.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Templates.TemplatesForm.Close' at Center.", repo.Templates.TemplatesForm.CloseInfo, new RecordItemIndex(20));
            repo.Templates.TemplatesForm.Close.Click();
            Delay.Milliseconds(200);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
