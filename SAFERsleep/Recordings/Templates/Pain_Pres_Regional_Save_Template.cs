///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SAFERsleep.Recordings.Templates
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Pain_Pres_Regional_Save_Template recording.
    /// </summary>
    [TestModule("24b1397f-a7b9-44ce-baf3-c5564cffd885", ModuleType.Recording, 1)]
    public partial class Pain_Pres_Regional_Save_Template : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SAFERsleep.SAFERsleepORRepository repository.
        /// </summary>
        public static SAFERsleep.SAFERsleepORRepository repo = SAFERsleep.SAFERsleepORRepository.Instance;

        static Pain_Pres_Regional_Save_Template instance = new Pain_Pres_Regional_Save_Template();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Pain_Pres_Regional_Save_Template()
        {
            TemplateName = "Auto Regional Infusion Pain Prescription";
            Infusion1Med = "Bupivacaine 0.25% 2.5mg/ml (100ml)";
            Infusion1Mode = "Bolus dose with continuous infusion";
            Infusion1Bolus = "10";
            Infusion1Unit = "ml";
            Infusion1Rate = "20";
            Infusion1RateUnit = "ml/hr";
            Infusion2Bolus = "11";
            Infusion2Rate = "12";
            Infusion2Lockout = "5";
            Infusion1Lockout = "10";
            Infusion1Hour = "1";
            Infusion1DoseLimit = "2";
            Infusion2Hour = "1";
            Infusion2DoseLimit = "2";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Pain_Pres_Regional_Save_Template Instance
        {
            get { return instance; }
        }

#region Variables

        string _Infusion1Med;

        /// <summary>
        /// Gets or sets the value of variable Infusion1Med.
        /// </summary>
        [TestVariable("ef37725b-6336-45dc-a264-39ec31f26657")]
        public string Infusion1Med
        {
            get { return _Infusion1Med; }
            set { _Infusion1Med = value; }
        }

        string _Infusion1Mode;

        /// <summary>
        /// Gets or sets the value of variable Infusion1Mode.
        /// </summary>
        [TestVariable("73bb3161-fb04-4296-9a6c-6da8e683a57b")]
        public string Infusion1Mode
        {
            get { return _Infusion1Mode; }
            set { _Infusion1Mode = value; }
        }

        string _Infusion1Bolus;

        /// <summary>
        /// Gets or sets the value of variable Infusion1Bolus.
        /// </summary>
        [TestVariable("97fd6585-3933-4f11-84c1-bec653731002")]
        public string Infusion1Bolus
        {
            get { return _Infusion1Bolus; }
            set { _Infusion1Bolus = value; }
        }

        string _Infusion1Unit;

        /// <summary>
        /// Gets or sets the value of variable Infusion1Unit.
        /// </summary>
        [TestVariable("2f35e89a-4f2b-43c4-9944-27a93634c0a5")]
        public string Infusion1Unit
        {
            get { return _Infusion1Unit; }
            set { _Infusion1Unit = value; }
        }

        string _Infusion1Rate;

        /// <summary>
        /// Gets or sets the value of variable Infusion1Rate.
        /// </summary>
        [TestVariable("5bc69dce-a06a-476a-b585-28d9607b9caa")]
        public string Infusion1Rate
        {
            get { return _Infusion1Rate; }
            set { _Infusion1Rate = value; }
        }

        string _Infusion1RateUnit;

        /// <summary>
        /// Gets or sets the value of variable Infusion1RateUnit.
        /// </summary>
        [TestVariable("d8951dbe-cc14-4cc9-b6fd-1f78d2ef75ea")]
        public string Infusion1RateUnit
        {
            get { return _Infusion1RateUnit; }
            set { _Infusion1RateUnit = value; }
        }

        string _Infusion2Bolus;

        /// <summary>
        /// Gets or sets the value of variable Infusion2Bolus.
        /// </summary>
        [TestVariable("cd9654fb-d2d4-414b-9e4d-15ebe67f7019")]
        public string Infusion2Bolus
        {
            get { return _Infusion2Bolus; }
            set { _Infusion2Bolus = value; }
        }

        string _Infusion2Rate;

        /// <summary>
        /// Gets or sets the value of variable Infusion2Rate.
        /// </summary>
        [TestVariable("a3391f74-ce85-43db-bf75-31b48c90c283")]
        public string Infusion2Rate
        {
            get { return _Infusion2Rate; }
            set { _Infusion2Rate = value; }
        }

        string _Infusion2Lockout;

        /// <summary>
        /// Gets or sets the value of variable Infusion2Lockout.
        /// </summary>
        [TestVariable("33d66e1c-5fa2-43d4-a6bf-ff75349d9ff8")]
        public string Infusion2Lockout
        {
            get { return _Infusion2Lockout; }
            set { _Infusion2Lockout = value; }
        }

        string _Infusion1Lockout;

        /// <summary>
        /// Gets or sets the value of variable Infusion1Lockout.
        /// </summary>
        [TestVariable("5f1ccb84-6df3-4676-97f0-0c1ce986cc14")]
        public string Infusion1Lockout
        {
            get { return _Infusion1Lockout; }
            set { _Infusion1Lockout = value; }
        }

        string _Infusion1Hour;

        /// <summary>
        /// Gets or sets the value of variable Infusion1Hour.
        /// </summary>
        [TestVariable("cf6ee998-9ea0-4c58-b329-29e118876b1a")]
        public string Infusion1Hour
        {
            get { return _Infusion1Hour; }
            set { _Infusion1Hour = value; }
        }

        string _Infusion1DoseLimit;

        /// <summary>
        /// Gets or sets the value of variable Infusion1DoseLimit.
        /// </summary>
        [TestVariable("226975c5-49e4-4f49-873b-6495d664e565")]
        public string Infusion1DoseLimit
        {
            get { return _Infusion1DoseLimit; }
            set { _Infusion1DoseLimit = value; }
        }

        string _Infusion2Hour;

        /// <summary>
        /// Gets or sets the value of variable Infusion2Hour.
        /// </summary>
        [TestVariable("bcf530bf-4472-42b8-9336-74bfc88a1afb")]
        public string Infusion2Hour
        {
            get { return _Infusion2Hour; }
            set { _Infusion2Hour = value; }
        }

        string _Infusion2DoseLimit;

        /// <summary>
        /// Gets or sets the value of variable Infusion2DoseLimit.
        /// </summary>
        [TestVariable("d9a9ded1-ffc7-443d-a158-246ee8043819")]
        public string Infusion2DoseLimit
        {
            get { return _Infusion2DoseLimit; }
            set { _Infusion2DoseLimit = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable TemplateName.
        /// </summary>
        [TestVariable("7905d6e4-e6df-4fda-80f6-c3ac681f2732")]
        public string TemplateName
        {
            get { return repo.TemplateName; }
            set { repo.TemplateName = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmORMain.Templates' at Center.", repo.FrmORMain.TemplatesInfo, new RecordItemIndex(0));
            repo.FrmORMain.Templates.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Templates.TemplatesForm.SaveCurrentScreenAsTemplate' at Center.", repo.Templates.TemplatesForm.SaveCurrentScreenAsTemplateInfo, new RecordItemIndex(1));
            repo.Templates.TemplatesForm.SaveCurrentScreenAsTemplate.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Back' Press.", new RecordItemIndex(2));
            Keyboard.Press(System.Windows.Forms.Keys.Back, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SaveTemplate.TemplateName' at Center.", repo.SaveTemplate.TemplateNameInfo, new RecordItemIndex(3));
            repo.SaveTemplate.TemplateName.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$TemplateName'.", new RecordItemIndex(4));
            Keyboard.Press(TemplateName);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(5));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SaveTemplate.ButtonOK' at Center.", repo.SaveTemplate.ButtonOKInfo, new RecordItemIndex(6));
            repo.SaveTemplate.ButtonOK.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Templates.TemplatesForm.TemplateListItem' at Center.", repo.Templates.TemplatesForm.TemplateListItemInfo, new RecordItemIndex(7));
            repo.Templates.TemplatesForm.TemplateListItem.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Templates.TemplatesForm.ViewTemplate' at Center.", repo.Templates.TemplatesForm.ViewTemplateInfo, new RecordItemIndex(8));
            repo.Templates.TemplatesForm.ViewTemplate.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'TemplateAdministration.RegionalInfusion.RegionalInfusionTab' at Center.", repo.TemplateAdministration.RegionalInfusion.RegionalInfusionTabInfo, new RecordItemIndex(9));
            repo.TemplateAdministration.RegionalInfusion.RegionalInfusionTab.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'TemplateAdministration.RegionalInfusion.Infusion1Catheter1' at Center.", repo.TemplateAdministration.RegionalInfusion.Infusion1Catheter1Info, new RecordItemIndex(10));
            repo.TemplateAdministration.RegionalInfusion.Infusion1Catheter1.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Infusion1Med) on item 'TemplateAdministration.RegionalInfusion.Infusion1Medication'.", repo.TemplateAdministration.RegionalInfusion.Infusion1MedicationInfo, new RecordItemIndex(11));
            Validate.AttributeEqual(repo.TemplateAdministration.RegionalInfusion.Infusion1MedicationInfo, "Text", Infusion1Med);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Infusion1Mode) on item 'TemplateAdministration.RegionalInfusion.Infusion1Mode'.", repo.TemplateAdministration.RegionalInfusion.Infusion1ModeInfo, new RecordItemIndex(12));
            Validate.AttributeEqual(repo.TemplateAdministration.RegionalInfusion.Infusion1ModeInfo, "Text", Infusion1Mode);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Infusion1Bolus) on item 'TemplateAdministration.RegionalInfusion.Infusion1Bolus'.", repo.TemplateAdministration.RegionalInfusion.Infusion1BolusInfo, new RecordItemIndex(13));
            Validate.AttributeEqual(repo.TemplateAdministration.RegionalInfusion.Infusion1BolusInfo, "Text", Infusion1Bolus);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Infusion1Unit) on item 'TemplateAdministration.RegionalInfusion.Infusion1Unit'.", repo.TemplateAdministration.RegionalInfusion.Infusion1UnitInfo, new RecordItemIndex(14));
            Validate.AttributeEqual(repo.TemplateAdministration.RegionalInfusion.Infusion1UnitInfo, "Text", Infusion1Unit);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Infusion1Rate) on item 'TemplateAdministration.RegionalInfusion.Infusion1Rate'.", repo.TemplateAdministration.RegionalInfusion.Infusion1RateInfo, new RecordItemIndex(15));
            Validate.AttributeEqual(repo.TemplateAdministration.RegionalInfusion.Infusion1RateInfo, "Text", Infusion1Rate);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Infusion1RateUnit) on item 'TemplateAdministration.RegionalInfusion.Infusion1RateUnit'.", repo.TemplateAdministration.RegionalInfusion.Infusion1RateUnitInfo, new RecordItemIndex(16));
            Validate.AttributeEqual(repo.TemplateAdministration.RegionalInfusion.Infusion1RateUnitInfo, "Text", Infusion1RateUnit);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Infusion1Lockout) on item 'TemplateAdministration.RegionalInfusion.Infusion1Lockout'.", repo.TemplateAdministration.RegionalInfusion.Infusion1LockoutInfo, new RecordItemIndex(17));
            Validate.AttributeEqual(repo.TemplateAdministration.RegionalInfusion.Infusion1LockoutInfo, "Text", Infusion1Lockout);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Infusion1Hour) on item 'TemplateAdministration.RegionalInfusion.Infusion1Hour'.", repo.TemplateAdministration.RegionalInfusion.Infusion1HourInfo, new RecordItemIndex(18));
            Validate.AttributeEqual(repo.TemplateAdministration.RegionalInfusion.Infusion1HourInfo, "Text", Infusion1Hour);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Infusion1DoseLimit) on item 'TemplateAdministration.RegionalInfusion.Infusion1DoseLimit'.", repo.TemplateAdministration.RegionalInfusion.Infusion1DoseLimitInfo, new RecordItemIndex(19));
            Validate.AttributeEqual(repo.TemplateAdministration.RegionalInfusion.Infusion1DoseLimitInfo, "Text", Infusion1DoseLimit);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'TemplateAdministration.RegionalInfusion.Infusion2Catheter2' at Center.", repo.TemplateAdministration.RegionalInfusion.Infusion2Catheter2Info, new RecordItemIndex(20));
            repo.TemplateAdministration.RegionalInfusion.Infusion2Catheter2.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Infusion1Med) on item 'TemplateAdministration.RegionalInfusion.Infusion2Medication'.", repo.TemplateAdministration.RegionalInfusion.Infusion2MedicationInfo, new RecordItemIndex(21));
            Validate.AttributeEqual(repo.TemplateAdministration.RegionalInfusion.Infusion2MedicationInfo, "Text", Infusion1Med);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Infusion1Mode) on item 'TemplateAdministration.RegionalInfusion.Infusion2Mode'.", repo.TemplateAdministration.RegionalInfusion.Infusion2ModeInfo, new RecordItemIndex(22));
            Validate.AttributeEqual(repo.TemplateAdministration.RegionalInfusion.Infusion2ModeInfo, "Text", Infusion1Mode);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Infusion2Bolus) on item 'TemplateAdministration.RegionalInfusion.Infusion2Bolus'.", repo.TemplateAdministration.RegionalInfusion.Infusion2BolusInfo, new RecordItemIndex(23));
            Validate.AttributeEqual(repo.TemplateAdministration.RegionalInfusion.Infusion2BolusInfo, "Text", Infusion2Bolus);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Infusion1Unit) on item 'TemplateAdministration.RegionalInfusion.Infusion2Unit'.", repo.TemplateAdministration.RegionalInfusion.Infusion2UnitInfo, new RecordItemIndex(24));
            Validate.AttributeEqual(repo.TemplateAdministration.RegionalInfusion.Infusion2UnitInfo, "Text", Infusion1Unit);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Infusion2Rate) on item 'TemplateAdministration.RegionalInfusion.Infusion2Rate'.", repo.TemplateAdministration.RegionalInfusion.Infusion2RateInfo, new RecordItemIndex(25));
            Validate.AttributeEqual(repo.TemplateAdministration.RegionalInfusion.Infusion2RateInfo, "Text", Infusion2Rate);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Infusion1RateUnit) on item 'TemplateAdministration.RegionalInfusion.Infusion2RateUnit'.", repo.TemplateAdministration.RegionalInfusion.Infusion2RateUnitInfo, new RecordItemIndex(26));
            Validate.AttributeEqual(repo.TemplateAdministration.RegionalInfusion.Infusion2RateUnitInfo, "Text", Infusion1RateUnit);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Infusion2Lockout) on item 'TemplateAdministration.RegionalInfusion.Infusion2Lockout'.", repo.TemplateAdministration.RegionalInfusion.Infusion2LockoutInfo, new RecordItemIndex(27));
            Validate.AttributeEqual(repo.TemplateAdministration.RegionalInfusion.Infusion2LockoutInfo, "Text", Infusion2Lockout);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Infusion2Hour) on item 'TemplateAdministration.RegionalInfusion.Infusion2Hour'.", repo.TemplateAdministration.RegionalInfusion.Infusion2HourInfo, new RecordItemIndex(28));
            Validate.AttributeEqual(repo.TemplateAdministration.RegionalInfusion.Infusion2HourInfo, "Text", Infusion2Hour);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Infusion2DoseLimit) on item 'TemplateAdministration.RegionalInfusion.Infusion2DoseLimit'.", repo.TemplateAdministration.RegionalInfusion.Infusion2DoseLimitInfo, new RecordItemIndex(29));
            Validate.AttributeEqual(repo.TemplateAdministration.RegionalInfusion.Infusion2DoseLimitInfo, "Text", Infusion2DoseLimit);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'TemplateAdministration.ButtonClose' at Center.", repo.TemplateAdministration.ButtonCloseInfo, new RecordItemIndex(30));
            repo.TemplateAdministration.ButtonClose.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Templates.TemplatesForm.Close' at Center.", repo.Templates.TemplatesForm.CloseInfo, new RecordItemIndex(31));
            repo.Templates.TemplatesForm.Close.Click();
            Delay.Milliseconds(200);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
