///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SAFERSleep_AP.Recordings.Modalities.PCA
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The AddPCAModality recording.
    /// </summary>
    [TestModule("06ea54d1-81eb-4e6f-8463-011bd2fb19b0", ModuleType.Recording, 1)]
    public partial class AddPCAModality : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SAFERSleep_AP.SAFERSleep_APRepository repository.
        /// </summary>
        public static SAFERSleep_AP.SAFERSleep_APRepository repo = SAFERSleep_AP.SAFERSleep_APRepository.Instance;

        static AddPCAModality instance = new AddPCAModality();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public AddPCAModality()
        {
            Medication = "Fentanyl 10 mcg/ml 1000 mcg (Total Volume: 100 mls)";
            Mode = "Bolus dose only";
            Dose = "4.99";
            Unit = "ml";
            Lockout = "10";
            Rate = "5.1";
            hr = "1";
            DoseLimit = "20.55";
            BolusesGiven = "";
            ReasonAcknowledged = "";
            BolusesAttempted = "";
            hr2 = "";
            Total = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static AddPCAModality Instance
        {
            get { return instance; }
        }

#region Variables

        string _Unit;

        /// <summary>
        /// Gets or sets the value of variable Unit.
        /// </summary>
        [TestVariable("672941cb-5f77-4f8f-9aa3-3380caa503fe")]
        public string Unit
        {
            get { return _Unit; }
            set { _Unit = value; }
        }

        string _hr;

        /// <summary>
        /// Gets or sets the value of variable hr.
        /// </summary>
        [TestVariable("5fbcd4a6-3b06-4bd4-99e3-83d4c83f851c")]
        public string hr
        {
            get { return _hr; }
            set { _hr = value; }
        }

        string _DoseLimit;

        /// <summary>
        /// Gets or sets the value of variable DoseLimit.
        /// </summary>
        [TestVariable("850db1af-c70d-4950-83c3-8c690f0dcf0d")]
        public string DoseLimit
        {
            get { return _DoseLimit; }
            set { _DoseLimit = value; }
        }

        string _BolusesGiven;

        /// <summary>
        /// Gets or sets the value of variable BolusesGiven.
        /// </summary>
        [TestVariable("b20f4d82-1074-4503-ab34-1e8e14cae320")]
        public string BolusesGiven
        {
            get { return _BolusesGiven; }
            set { _BolusesGiven = value; }
        }

        string _ReasonAcknowledged;

        /// <summary>
        /// Gets or sets the value of variable ReasonAcknowledged.
        /// </summary>
        [TestVariable("c7509ff5-1182-4774-ac79-da246fc2ffe5")]
        public string ReasonAcknowledged
        {
            get { return _ReasonAcknowledged; }
            set { _ReasonAcknowledged = value; }
        }

        string _BolusesAttempted;

        /// <summary>
        /// Gets or sets the value of variable BolusesAttempted.
        /// </summary>
        [TestVariable("d065f083-87de-4e1f-a025-995749eaa49e")]
        public string BolusesAttempted
        {
            get { return _BolusesAttempted; }
            set { _BolusesAttempted = value; }
        }

        string _hr2;

        /// <summary>
        /// Gets or sets the value of variable hr2.
        /// </summary>
        [TestVariable("68ab613f-41dc-4320-bce7-226f7b472c96")]
        public string hr2
        {
            get { return _hr2; }
            set { _hr2 = value; }
        }

        string _Total;

        /// <summary>
        /// Gets or sets the value of variable Total.
        /// </summary>
        [TestVariable("047e7cb2-9734-4f5d-b538-9ee773399b97")]
        public string Total
        {
            get { return _Total; }
            set { _Total = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Medication.
        /// </summary>
        [TestVariable("527bfe98-4c65-4435-b5e5-e5a3b46be551")]
        public string Medication
        {
            get { return repo.Medication; }
            set { repo.Medication = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Mode.
        /// </summary>
        [TestVariable("2cdfe1fa-b462-4b04-8dbb-0ca544fad917")]
        public string Mode
        {
            get { return repo.Mode; }
            set { repo.Mode = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Dose.
        /// </summary>
        [TestVariable("62d80f30-a602-4f2d-9489-17fe243f322c")]
        public string Dose
        {
            get { return repo.Dose; }
            set { repo.Dose = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Lockout.
        /// </summary>
        [TestVariable("3c687cca-e6b3-4e30-b966-3d99a74beb1f")]
        public string Lockout
        {
            get { return repo.Lockout; }
            set { repo.Lockout = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Rate.
        /// </summary>
        [TestVariable("9a020c44-a92d-4001-86cb-e74d3db43652")]
        public string Rate
        {
            get { return repo.Rate; }
            set { repo.Rate = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            // Click on Add button
            Report.Log(ReportLevel.Info, "Mouse", "Click on Add button\r\nMouse Left Click item 'MainWindow.Modalities.AdvancedModalities.Add' at Center.", repo.MainWindow.Modalities.AdvancedModalities.AddInfo, new RecordItemIndex(0));
            repo.MainWindow.Modalities.AdvancedModalities.Add.Click();
            
            // Select "PCA (Intravenous)" tab
            Report.Log(ReportLevel.Info, "Mouse", "Select \"PCA (Intravenous)\" tab\r\nMouse Left Click item 'ModalityMenuItems.PCA' at Center.", repo.ModalityMenuItems.PCAInfo, new RecordItemIndex(1));
            repo.ModalityMenuItems.PCA.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.Modalities.AddModalityWindow.PCA.MedicationPCA' at Center.", repo.MainWindow.Modalities.AddModalityWindow.PCA.MedicationPCAInfo, new RecordItemIndex(2));
            repo.MainWindow.Modalities.AddModalityWindow.PCA.MedicationPCA.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ListItems.MedicationListItem' at Center.", repo.ListItems.MedicationListItemInfo, new RecordItemIndex(3));
            repo.ListItems.MedicationListItem.Click();
            
            SAFERSleepAPCollection.AcknowledgeAllergy(ReasonAcknowledged, repo.MainWindow.Modalities.AllergyChecking.AcknowledgedButtonPCAInfo, repo.MainWindow.Modalities.ReasonForAcknowledgeAllergy.SaveInfo);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.Modalities.AddModalityWindow.PCA.ModePCA' at Center.", repo.MainWindow.Modalities.AddModalityWindow.PCA.ModePCAInfo, new RecordItemIndex(5));
            repo.MainWindow.Modalities.AddModalityWindow.PCA.ModePCA.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Mode'.", new RecordItemIndex(6));
            Keyboard.Press(Mode);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Enter' Press.", new RecordItemIndex(7));
            Keyboard.Press(System.Windows.Forms.Keys.Return, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.Modalities.AddModalityWindow.PCA.DosePCA' at CenterLeft.", repo.MainWindow.Modalities.AddModalityWindow.PCA.DosePCAInfo, new RecordItemIndex(8));
            repo.MainWindow.Modalities.AddModalityWindow.PCA.DosePCA.Click(Location.CenterLeft);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Dose'.", new RecordItemIndex(9));
            Keyboard.Press(Dose);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.Modalities.AddModalityWindow.PCA.DoseUnitPCA' at Center.", repo.MainWindow.Modalities.AddModalityWindow.PCA.DoseUnitPCAInfo, new RecordItemIndex(10));
            repo.MainWindow.Modalities.AddModalityWindow.PCA.DoseUnitPCA.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Unit'.", new RecordItemIndex(11));
            Keyboard.Press(Unit);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Enter' Press.", new RecordItemIndex(12));
            Keyboard.Press(System.Windows.Forms.Keys.Return, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.Modalities.AddModalityWindow.PCA.LockoutPCA' at Center.", repo.MainWindow.Modalities.AddModalityWindow.PCA.LockoutPCAInfo, new RecordItemIndex(13));
            repo.MainWindow.Modalities.AddModalityWindow.PCA.LockoutPCA.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Lockout'.", new RecordItemIndex(14));
            Keyboard.Press(Lockout);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.Modalities.AddModalityWindow.PCA.RatePCA' at CenterLeft.", repo.MainWindow.Modalities.AddModalityWindow.PCA.RatePCAInfo, new RecordItemIndex(15));
            repo.MainWindow.Modalities.AddModalityWindow.PCA.RatePCA.Click(Location.CenterLeft);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Rate'.", new RecordItemIndex(16));
            Keyboard.Press(Rate);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.Modalities.AddModalityWindow.PCA.hrPCA' at Center.", repo.MainWindow.Modalities.AddModalityWindow.PCA.hrPCAInfo, new RecordItemIndex(17));
            repo.MainWindow.Modalities.AddModalityWindow.PCA.hrPCA.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$hr'.", new RecordItemIndex(18));
            Keyboard.Press(hr);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Enter' Press.", new RecordItemIndex(19));
            Keyboard.Press(System.Windows.Forms.Keys.Return, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.Modalities.AddModalityWindow.PCA.DoseLimitPCA' at CenterLeft.", repo.MainWindow.Modalities.AddModalityWindow.PCA.DoseLimitPCAInfo, new RecordItemIndex(20));
            repo.MainWindow.Modalities.AddModalityWindow.PCA.DoseLimitPCA.Click(Location.CenterLeft);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Back' Press.", new RecordItemIndex(21));
            Keyboard.Press(System.Windows.Forms.Keys.Back, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$DoseLimit'.", new RecordItemIndex(22));
            Keyboard.Press(DoseLimit);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.Modalities.AddModalityWindow.PCA.BolusesGiven' at CenterLeft.", repo.MainWindow.Modalities.AddModalityWindow.PCA.BolusesGivenInfo, new RecordItemIndex(23));
            repo.MainWindow.Modalities.AddModalityWindow.PCA.BolusesGiven.Click(Location.CenterLeft);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$BolusesGiven'.", new RecordItemIndex(24));
            Keyboard.Press(BolusesGiven);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.Modalities.AddModalityWindow.PCA.BolusesAttempted' at CenterLeft.", repo.MainWindow.Modalities.AddModalityWindow.PCA.BolusesAttemptedInfo, new RecordItemIndex(25));
            repo.MainWindow.Modalities.AddModalityWindow.PCA.BolusesAttempted.Click(Location.CenterLeft);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$BolusesAttempted'.", new RecordItemIndex(26));
            Keyboard.Press(BolusesAttempted);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.Modalities.AddModalityWindow.PCA.hr2PCA' at Center.", repo.MainWindow.Modalities.AddModalityWindow.PCA.hr2PCAInfo, new RecordItemIndex(27));
            repo.MainWindow.Modalities.AddModalityWindow.PCA.hr2PCA.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$hr2'.", new RecordItemIndex(28));
            Keyboard.Press(hr2);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Enter' Press.", new RecordItemIndex(29));
            Keyboard.Press(System.Windows.Forms.Keys.Return, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.Modalities.AddModalityWindow.PCA.Total' at Center.", repo.MainWindow.Modalities.AddModalityWindow.PCA.TotalInfo, new RecordItemIndex(30));
            repo.MainWindow.Modalities.AddModalityWindow.PCA.Total.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Total'.", new RecordItemIndex(31));
            Keyboard.Press(Total);
            
            // Save PCA Modality
            Report.Log(ReportLevel.Info, "Mouse", "Save PCA Modality\r\nMouse Left Click item 'MainWindow.MainButtons.OnPoppup.SaveDialogue' at Center.", repo.MainWindow.MainButtons.OnPoppup.SaveDialogueInfo, new RecordItemIndex(32));
            repo.MainWindow.MainButtons.OnPoppup.SaveDialogue.Click();
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
