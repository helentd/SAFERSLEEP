///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SAFERSleep_AP.Recordings.Modalities.PCA
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The EditPCAModality recording.
    /// </summary>
    [TestModule("3d283434-7296-4af6-a719-59f78749662d", ModuleType.Recording, 1)]
    public partial class EditPCAModality : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SAFERSleep_AP.SAFERSleep_APRepository repository.
        /// </summary>
        public static SAFERSleep_AP.SAFERSleep_APRepository repo = SAFERSleep_AP.SAFERSleep_APRepository.Instance;

        static EditPCAModality instance = new EditPCAModality();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public EditPCAModality()
        {
            ReasonAcknowledged = "This is a test reason for acknowledge allergy";
            Dose = "";
            Unit = "";
            Rate = "";
            Lockout = "";
            hr = "";
            Doselimit = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static EditPCAModality Instance
        {
            get { return instance; }
        }

#region Variables

        string _ReasonAcknowledged;

        /// <summary>
        /// Gets or sets the value of variable ReasonAcknowledged.
        /// </summary>
        [TestVariable("85685506-5f92-4aee-8879-7292b341d3b8")]
        public string ReasonAcknowledged
        {
            get { return _ReasonAcknowledged; }
            set { _ReasonAcknowledged = value; }
        }

        string _Unit;

        /// <summary>
        /// Gets or sets the value of variable Unit.
        /// </summary>
        [TestVariable("6002f6d6-efcb-4326-94b0-ad910a662363")]
        public string Unit
        {
            get { return _Unit; }
            set { _Unit = value; }
        }

        string _hr;

        /// <summary>
        /// Gets or sets the value of variable hr.
        /// </summary>
        [TestVariable("619124f6-e8dc-468e-9868-481a187f8845")]
        public string hr
        {
            get { return _hr; }
            set { _hr = value; }
        }

        string _Doselimit;

        /// <summary>
        /// Gets or sets the value of variable Doselimit.
        /// </summary>
        [TestVariable("ce3c06eb-723d-4377-8cb9-4d5b5db43a6e")]
        public string Doselimit
        {
            get { return _Doselimit; }
            set { _Doselimit = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Medication.
        /// </summary>
        [TestVariable("52b6827b-4200-457f-8aad-91aaa2b7444c")]
        public string Medication
        {
            get { return repo.Medication; }
            set { repo.Medication = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Mode.
        /// </summary>
        [TestVariable("01b08a55-7e2a-47d1-9834-0ab7500159f1")]
        public string Mode
        {
            get { return repo.Mode; }
            set { repo.Mode = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Dose.
        /// </summary>
        [TestVariable("9b831135-8ad8-4b0a-8907-8bb25a78c14f")]
        public string Dose
        {
            get { return repo.Dose; }
            set { repo.Dose = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Rate.
        /// </summary>
        [TestVariable("9242e2ae-6ab2-4008-94e6-9159183204a4")]
        public string Rate
        {
            get { return repo.Rate; }
            set { repo.Rate = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Lockout.
        /// </summary>
        [TestVariable("481bacb6-4460-48b8-9c2f-bd9f4c33c8a4")]
        public string Lockout
        {
            get { return repo.Lockout; }
            set { repo.Lockout = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.Modalities.AddModalityWindow.PCA.MedicationPCA' at Center.", repo.MainWindow.Modalities.AddModalityWindow.PCA.MedicationPCAInfo, new RecordItemIndex(0));
            repo.MainWindow.Modalities.AddModalityWindow.PCA.MedicationPCA.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ListItems.MedicationListItem' at Center.", repo.ListItems.MedicationListItemInfo, new RecordItemIndex(1));
            repo.ListItems.MedicationListItem.Click();
            Delay.Milliseconds(200);
            
            SAFERSleepAPCollection.AcknowledgeAllergy(ReasonAcknowledged, repo.MainWindow.Modalities.AllergyChecking.AcknowledgedButtonPCAInfo, repo.MainWindow.Modalities.ReasonForAcknowledgeAllergy.SaveInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.Modalities.AddModalityWindow.PCA.ModePCA' at Center.", repo.MainWindow.Modalities.AddModalityWindow.PCA.ModePCAInfo, new RecordItemIndex(3));
            repo.MainWindow.Modalities.AddModalityWindow.PCA.ModePCA.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ListItems.ModeListItem' at Center.", repo.ListItems.ModeListItemInfo, new RecordItemIndex(4));
            repo.ListItems.ModeListItem.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.Modalities.AddModalityWindow.PCA.DosePCA' at Center.", repo.MainWindow.Modalities.AddModalityWindow.PCA.DosePCAInfo, new RecordItemIndex(5));
            repo.MainWindow.Modalities.AddModalityWindow.PCA.DosePCA.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Dose'.", new RecordItemIndex(6));
            Keyboard.Press(Dose);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.Modalities.AddModalityWindow.PCA.DoseUnitPCA' at Center.", repo.MainWindow.Modalities.AddModalityWindow.PCA.DoseUnitPCAInfo, new RecordItemIndex(7));
            repo.MainWindow.Modalities.AddModalityWindow.PCA.DoseUnitPCA.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Unit'.", new RecordItemIndex(8));
            Keyboard.Press(Unit);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Enter' Press.", new RecordItemIndex(9));
            Keyboard.Press(System.Windows.Forms.Keys.Return, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.Modalities.AddModalityWindow.PCA.RatePCA' at Center.", repo.MainWindow.Modalities.AddModalityWindow.PCA.RatePCAInfo, new RecordItemIndex(10));
            repo.MainWindow.Modalities.AddModalityWindow.PCA.RatePCA.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Rate'.", new RecordItemIndex(11));
            Keyboard.Press(Rate);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.Modalities.AddModalityWindow.PCA.LockoutPCA' at Center.", repo.MainWindow.Modalities.AddModalityWindow.PCA.LockoutPCAInfo, new RecordItemIndex(12));
            repo.MainWindow.Modalities.AddModalityWindow.PCA.LockoutPCA.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Lockout'.", new RecordItemIndex(13));
            Keyboard.Press(Lockout);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.Modalities.AddModalityWindow.PCA.hrPCA' at Center.", repo.MainWindow.Modalities.AddModalityWindow.PCA.hrPCAInfo, new RecordItemIndex(14));
            repo.MainWindow.Modalities.AddModalityWindow.PCA.hrPCA.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$hr'.", new RecordItemIndex(15));
            Keyboard.Press(hr);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Enter' Press.", new RecordItemIndex(16));
            Keyboard.Press(System.Windows.Forms.Keys.Return, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.Modalities.AddModalityWindow.PCA.DoseLimitPCA' at Center.", repo.MainWindow.Modalities.AddModalityWindow.PCA.DoseLimitPCAInfo, new RecordItemIndex(17));
            repo.MainWindow.Modalities.AddModalityWindow.PCA.DoseLimitPCA.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Back' Press.", new RecordItemIndex(18));
            Keyboard.Press(System.Windows.Forms.Keys.Back, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Doselimit'.", new RecordItemIndex(19));
            Keyboard.Press(Doselimit);
            Delay.Milliseconds(100);
            
            // Save PCA Modality
            Report.Log(ReportLevel.Info, "Mouse", "Save PCA Modality\r\nMouse Left Click item 'MainWindow.MainButtons.OnPoppup.SaveDialogue' at Center.", repo.MainWindow.MainButtons.OnPoppup.SaveDialogueInfo, new RecordItemIndex(20));
            repo.MainWindow.MainButtons.OnPoppup.SaveDialogue.Click();
            Delay.Milliseconds(200);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
