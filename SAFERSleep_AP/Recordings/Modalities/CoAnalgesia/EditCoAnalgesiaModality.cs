///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SAFERSleep_AP.Recordings.Modalities.CoAnalgesia
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The EditCoAnalgesiaModality recording.
    /// </summary>
    [TestModule("2e8b31ec-3da9-4627-af62-1a8d05b36458", ModuleType.Recording, 1)]
    public partial class EditCoAnalgesiaModality : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SAFERSleep_AP.SAFERSleep_APRepository repository.
        /// </summary>
        public static SAFERSleep_AP.SAFERSleep_APRepository repo = SAFERSleep_AP.SAFERSleep_APRepository.Instance;

        static EditCoAnalgesiaModality instance = new EditCoAnalgesiaModality();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public EditCoAnalgesiaModality()
        {
            NewMedication = "";
            ReasonAcknowleged = "This is a test reason for acknowledge allergy";
            NewMode = "";
            NewDose = "5";
            NewUnit = "mg";
            NewRate = "5.55";
            Newhr = "1";
            NewDoseLimit = "1.05";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static EditCoAnalgesiaModality Instance
        {
            get { return instance; }
        }

#region Variables

        string _NewMedication;

        /// <summary>
        /// Gets or sets the value of variable NewMedication.
        /// </summary>
        [TestVariable("ae9f372b-d019-4076-b2ac-59e2f6661d29")]
        public string NewMedication
        {
            get { return _NewMedication; }
            set { _NewMedication = value; }
        }

        string _ReasonAcknowleged;

        /// <summary>
        /// Gets or sets the value of variable ReasonAcknowleged.
        /// </summary>
        [TestVariable("715c9804-7043-4d57-b7f4-06c5a02aa4fb")]
        public string ReasonAcknowleged
        {
            get { return _ReasonAcknowleged; }
            set { _ReasonAcknowleged = value; }
        }

        string _NewMode;

        /// <summary>
        /// Gets or sets the value of variable NewMode.
        /// </summary>
        [TestVariable("44a99ec1-a6e3-4d5d-b31f-3a35c402c904")]
        public string NewMode
        {
            get { return _NewMode; }
            set { _NewMode = value; }
        }

        string _NewDose;

        /// <summary>
        /// Gets or sets the value of variable NewDose.
        /// </summary>
        [TestVariable("eba18764-c9a9-4fb3-b818-de7c3aec1dc9")]
        public string NewDose
        {
            get { return _NewDose; }
            set { _NewDose = value; }
        }

        string _NewUnit;

        /// <summary>
        /// Gets or sets the value of variable NewUnit.
        /// </summary>
        [TestVariable("b14b147b-0489-4bbd-b13b-cf8b1a61bbae")]
        public string NewUnit
        {
            get { return _NewUnit; }
            set { _NewUnit = value; }
        }

        string _NewRate;

        /// <summary>
        /// Gets or sets the value of variable NewRate.
        /// </summary>
        [TestVariable("21f1a46e-44d8-4779-983d-5290b451b151")]
        public string NewRate
        {
            get { return _NewRate; }
            set { _NewRate = value; }
        }

        string _Newhr;

        /// <summary>
        /// Gets or sets the value of variable Newhr.
        /// </summary>
        [TestVariable("5c263ae4-6acd-4eee-a362-64c9ae8c9531")]
        public string Newhr
        {
            get { return _Newhr; }
            set { _Newhr = value; }
        }

        string _NewDoseLimit;

        /// <summary>
        /// Gets or sets the value of variable NewDoseLimit.
        /// </summary>
        [TestVariable("9a15ef9b-23b1-4c10-b7d4-bcf0505806de")]
        public string NewDoseLimit
        {
            get { return _NewDoseLimit; }
            set { _NewDoseLimit = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Medication.
        /// </summary>
        [TestVariable("52b6827b-4200-457f-8aad-91aaa2b7444c")]
        public string Medication
        {
            get { return repo.Medication; }
            set { repo.Medication = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.Modalities.AddModalityWindow.CoAnalgesia.MedicationCoAnalgesia' at Center.", repo.MainWindow.Modalities.AddModalityWindow.CoAnalgesia.MedicationCoAnalgesiaInfo, new RecordItemIndex(0));
            repo.MainWindow.Modalities.AddModalityWindow.CoAnalgesia.MedicationCoAnalgesia.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ListItems.MedicationListItem' at Center.", repo.ListItems.MedicationListItemInfo, new RecordItemIndex(1));
            repo.ListItems.MedicationListItem.Click();
            Delay.Milliseconds(200);
            
            //Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$NewMedication'.", new RecordItemIndex(2));
            //Keyboard.Press(NewMedication);
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Keyboard", "Key 'Enter' Press.", new RecordItemIndex(3));
            //Keyboard.Press(System.Windows.Forms.Keys.Return, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            //Delay.Milliseconds(0);
            
            SAFERSleepAPCollection.AcknowledgeAllergy(ReasonAcknowleged, repo.MainWindow.Modalities.AllergyChecking.AcknowledgedButtonCoAnalgesiaInfo, repo.MainWindow.Modalities.ReasonForAcknowledgeAllergy.SaveInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.Modalities.AddModalityWindow.CoAnalgesia.ModeCoAnalgesia' at Center.", repo.MainWindow.Modalities.AddModalityWindow.CoAnalgesia.ModeCoAnalgesiaInfo, new RecordItemIndex(5));
            repo.MainWindow.Modalities.AddModalityWindow.CoAnalgesia.ModeCoAnalgesia.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$NewMode'.", new RecordItemIndex(6));
            Keyboard.Press(NewMode);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Enter' Press.", new RecordItemIndex(7));
            Keyboard.Press(System.Windows.Forms.Keys.Return, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.Modalities.AddModalityWindow.CoAnalgesia.DoseCoAnalgesia' at Center.", repo.MainWindow.Modalities.AddModalityWindow.CoAnalgesia.DoseCoAnalgesiaInfo, new RecordItemIndex(8));
            repo.MainWindow.Modalities.AddModalityWindow.CoAnalgesia.DoseCoAnalgesia.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$NewDose'.", new RecordItemIndex(9));
            Keyboard.Press(NewDose);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.Modalities.AddModalityWindow.CoAnalgesia.DoseUnitCoAnalgesia' at Center.", repo.MainWindow.Modalities.AddModalityWindow.CoAnalgesia.DoseUnitCoAnalgesiaInfo, new RecordItemIndex(10));
            repo.MainWindow.Modalities.AddModalityWindow.CoAnalgesia.DoseUnitCoAnalgesia.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$NewUnit'.", new RecordItemIndex(11));
            Keyboard.Press(NewUnit);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Enter' Press.", new RecordItemIndex(12));
            Keyboard.Press(System.Windows.Forms.Keys.Return, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.Modalities.AddModalityWindow.CoAnalgesia.RateCoAnalgesia' at Center.", repo.MainWindow.Modalities.AddModalityWindow.CoAnalgesia.RateCoAnalgesiaInfo, new RecordItemIndex(13));
            repo.MainWindow.Modalities.AddModalityWindow.CoAnalgesia.RateCoAnalgesia.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$NewRate'.", new RecordItemIndex(14));
            Keyboard.Press(NewRate);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.Modalities.AddModalityWindow.CoAnalgesia.hrCoAnalgesia' at Center.", repo.MainWindow.Modalities.AddModalityWindow.CoAnalgesia.hrCoAnalgesiaInfo, new RecordItemIndex(15));
            repo.MainWindow.Modalities.AddModalityWindow.CoAnalgesia.hrCoAnalgesia.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Newhr'.", new RecordItemIndex(16));
            Keyboard.Press(Newhr);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Enter' Press.", new RecordItemIndex(17));
            Keyboard.Press(System.Windows.Forms.Keys.Return, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.Modalities.AddModalityWindow.CoAnalgesia.DoseLimitCoAnalgesia' at Center.", repo.MainWindow.Modalities.AddModalityWindow.CoAnalgesia.DoseLimitCoAnalgesiaInfo, new RecordItemIndex(18));
            repo.MainWindow.Modalities.AddModalityWindow.CoAnalgesia.DoseLimitCoAnalgesia.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Back' Press.", new RecordItemIndex(19));
            Keyboard.Press(System.Windows.Forms.Keys.Back, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$NewDoseLimit'.", new RecordItemIndex(20));
            Keyboard.Press(NewDoseLimit);
            Delay.Milliseconds(100);
            
            // Save Co-Analgesia Modality
            Report.Log(ReportLevel.Info, "Mouse", "Save Co-Analgesia Modality\r\nMouse Left Click item 'MainWindow.MainButtons.OnPoppup.SaveDialogue' at Center.", repo.MainWindow.MainButtons.OnPoppup.SaveDialogueInfo, new RecordItemIndex(21));
            repo.MainWindow.MainButtons.OnPoppup.SaveDialogue.Click();
            Delay.Milliseconds(200);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
