///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SAFERSleep_AP.Recordings.Modalities.CoAnalgesia
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The NewLineCoAnalgesiaModality recording.
    /// </summary>
    [TestModule("ef366bab-6700-4e8d-a275-043722a05939", ModuleType.Recording, 1)]
    public partial class NewLineCoAnalgesiaModality : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SAFERSleep_AP.SAFERSleep_APRepository repository.
        /// </summary>
        public static SAFERSleep_AP.SAFERSleep_APRepository repo = SAFERSleep_AP.SAFERSleep_APRepository.Instance;

        static NewLineCoAnalgesiaModality instance = new NewLineCoAnalgesiaModality();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public NewLineCoAnalgesiaModality()
        {
            NewMedication = "";
            Mode = "";
            Dose = "";
            DoseUnit = "";
            Rate = "";
            hr = "";
            DoseLimit = "";
            ReasonAcknowledged = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static NewLineCoAnalgesiaModality Instance
        {
            get { return instance; }
        }

#region Variables

        string _NewMedication;

        /// <summary>
        /// Gets or sets the value of variable NewMedication.
        /// </summary>
        [TestVariable("8bdcd13c-41d2-46d9-8192-fb5c888e2501")]
        public string NewMedication
        {
            get { return _NewMedication; }
            set { _NewMedication = value; }
        }

        string _DoseUnit;

        /// <summary>
        /// Gets or sets the value of variable DoseUnit.
        /// </summary>
        [TestVariable("07a87bd8-0e9b-4d5e-ad9b-2e6d1cdb754b")]
        public string DoseUnit
        {
            get { return _DoseUnit; }
            set { _DoseUnit = value; }
        }

        string _hr;

        /// <summary>
        /// Gets or sets the value of variable hr.
        /// </summary>
        [TestVariable("9dce1a4e-5713-484a-8331-db5423d2758d")]
        public string hr
        {
            get { return _hr; }
            set { _hr = value; }
        }

        string _DoseLimit;

        /// <summary>
        /// Gets or sets the value of variable DoseLimit.
        /// </summary>
        [TestVariable("abff9e8b-949d-4f2d-b9bc-ab6f13eb126c")]
        public string DoseLimit
        {
            get { return _DoseLimit; }
            set { _DoseLimit = value; }
        }

        string _ReasonAcknowledged;

        /// <summary>
        /// Gets or sets the value of variable ReasonAcknowledged.
        /// </summary>
        [TestVariable("fbc6f4a7-fa3c-4b8f-bda1-6a7f0a21e6a2")]
        public string ReasonAcknowledged
        {
            get { return _ReasonAcknowledged; }
            set { _ReasonAcknowledged = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Medication.
        /// </summary>
        [TestVariable("52b6827b-4200-457f-8aad-91aaa2b7444c")]
        public string Medication
        {
            get { return repo.Medication; }
            set { repo.Medication = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Mode.
        /// </summary>
        [TestVariable("75daaba9-ac94-4f73-964c-c77c49befe08")]
        public string Mode
        {
            get { return repo.Mode; }
            set { repo.Mode = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Dose.
        /// </summary>
        [TestVariable("697ffcd1-e395-4ebe-8139-94106515d75c")]
        public string Dose
        {
            get { return repo.Dose; }
            set { repo.Dose = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Rate.
        /// </summary>
        [TestVariable("acc86a10-b011-4ea8-9812-db8706c73c57")]
        public string Rate
        {
            get { return repo.Rate; }
            set { repo.Rate = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.Modalities.AddModalityWindow.NewLine' at Center.", repo.MainWindow.Modalities.AddModalityWindow.NewLineInfo, new RecordItemIndex(0));
            repo.MainWindow.Modalities.AddModalityWindow.NewLine.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.Modalities.AddModalityWindow.CoAnalgesia.MedicationCoAnalgesia' at Center.", repo.MainWindow.Modalities.AddModalityWindow.CoAnalgesia.MedicationCoAnalgesiaInfo, new RecordItemIndex(1));
            repo.MainWindow.Modalities.AddModalityWindow.CoAnalgesia.MedicationCoAnalgesia.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ListItems.MedicationListItem' at Center.", repo.ListItems.MedicationListItemInfo, new RecordItemIndex(2));
            repo.ListItems.MedicationListItem.Click();
            Delay.Milliseconds(200);
            
            //Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$NewMedication'.", new RecordItemIndex(3));
            //Keyboard.Press(NewMedication);
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Keyboard", "Key 'Enter' Press.", new RecordItemIndex(4));
            //Keyboard.Press(System.Windows.Forms.Keys.Return, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            //Delay.Milliseconds(0);
            
            SAFERSleepAPCollection.AcknowledgeAllergy(ReasonAcknowledged, repo.MainWindow.Modalities.AllergyChecking.AcknowledgedButtonCoAnalgesiaInfo, repo.MainWindow.Modalities.ReasonForAcknowledgeAllergy.SaveInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.Modalities.AddModalityWindow.CoAnalgesia.ModeCoAnalgesia' at Center.", repo.MainWindow.Modalities.AddModalityWindow.CoAnalgesia.ModeCoAnalgesiaInfo, new RecordItemIndex(6));
            repo.MainWindow.Modalities.AddModalityWindow.CoAnalgesia.ModeCoAnalgesia.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Mode'.", new RecordItemIndex(7));
            Keyboard.Press(Mode);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Enter' Press.", new RecordItemIndex(8));
            Keyboard.Press(System.Windows.Forms.Keys.Return, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.Modalities.AddModalityWindow.CoAnalgesia.DoseCoAnalgesia' at Center.", repo.MainWindow.Modalities.AddModalityWindow.CoAnalgesia.DoseCoAnalgesiaInfo, new RecordItemIndex(9));
            repo.MainWindow.Modalities.AddModalityWindow.CoAnalgesia.DoseCoAnalgesia.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Dose'.", new RecordItemIndex(10));
            Keyboard.Press(Dose);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.Modalities.AddModalityWindow.CoAnalgesia.DoseUnitCoAnalgesia' at Center.", repo.MainWindow.Modalities.AddModalityWindow.CoAnalgesia.DoseUnitCoAnalgesiaInfo, new RecordItemIndex(11));
            repo.MainWindow.Modalities.AddModalityWindow.CoAnalgesia.DoseUnitCoAnalgesia.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$DoseUnit'.", new RecordItemIndex(12));
            Keyboard.Press(DoseUnit);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Enter' Press.", new RecordItemIndex(13));
            Keyboard.Press(System.Windows.Forms.Keys.Return, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.Modalities.AddModalityWindow.CoAnalgesia.RateCoAnalgesia' at Center.", repo.MainWindow.Modalities.AddModalityWindow.CoAnalgesia.RateCoAnalgesiaInfo, new RecordItemIndex(14));
            repo.MainWindow.Modalities.AddModalityWindow.CoAnalgesia.RateCoAnalgesia.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Rate'.", new RecordItemIndex(15));
            Keyboard.Press(Rate);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.Modalities.AddModalityWindow.CoAnalgesia.hrCoAnalgesia' at Center.", repo.MainWindow.Modalities.AddModalityWindow.CoAnalgesia.hrCoAnalgesiaInfo, new RecordItemIndex(16));
            repo.MainWindow.Modalities.AddModalityWindow.CoAnalgesia.hrCoAnalgesia.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$hr'.", new RecordItemIndex(17));
            Keyboard.Press(hr);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Enter' Press.", new RecordItemIndex(18));
            Keyboard.Press(System.Windows.Forms.Keys.Return, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.Modalities.AddModalityWindow.CoAnalgesia.DoseLimitCoAnalgesia' at Center.", repo.MainWindow.Modalities.AddModalityWindow.CoAnalgesia.DoseLimitCoAnalgesiaInfo, new RecordItemIndex(19));
            repo.MainWindow.Modalities.AddModalityWindow.CoAnalgesia.DoseLimitCoAnalgesia.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Back' Press.", new RecordItemIndex(20));
            Keyboard.Press(System.Windows.Forms.Keys.Back, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$DoseLimit'.", new RecordItemIndex(21));
            Keyboard.Press(DoseLimit);
            Delay.Milliseconds(100);
            
            // Save Co-Analgesia Modality
            Report.Log(ReportLevel.Info, "Mouse", "Save Co-Analgesia Modality\r\nMouse Left Click item 'MainWindow.MainButtons.OnPoppup.SaveDialogue' at Center.", repo.MainWindow.MainButtons.OnPoppup.SaveDialogueInfo, new RecordItemIndex(22));
            repo.MainWindow.MainButtons.OnPoppup.SaveDialogue.Click();
            Delay.Milliseconds(200);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
