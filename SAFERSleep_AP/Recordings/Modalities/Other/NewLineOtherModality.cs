///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SAFERSleep_AP.Recordings.Modalities.Other
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The NewLineOtherModality recording.
    /// </summary>
    [TestModule("3bddd89f-9fca-42b6-8951-143cb665689f", ModuleType.Recording, 1)]
    public partial class NewLineOtherModality : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SAFERSleep_AP.SAFERSleep_APRepository repository.
        /// </summary>
        public static SAFERSleep_AP.SAFERSleep_APRepository repo = SAFERSleep_AP.SAFERSleep_APRepository.Instance;

        static NewLineOtherModality instance = new NewLineOtherModality();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public NewLineOtherModality()
        {
            NewTotalSinceLastReview = "";
            NewUnit = "";
            ReasonForAcknowledge = "";
            Route = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static NewLineOtherModality Instance
        {
            get { return instance; }
        }

#region Variables

        string _NewTotalSinceLastReview;

        /// <summary>
        /// Gets or sets the value of variable NewTotalSinceLastReview.
        /// </summary>
        [TestVariable("7221ee48-dec1-4bdb-bc02-d755fd3d616f")]
        public string NewTotalSinceLastReview
        {
            get { return _NewTotalSinceLastReview; }
            set { _NewTotalSinceLastReview = value; }
        }

        string _NewUnit;

        /// <summary>
        /// Gets or sets the value of variable NewUnit.
        /// </summary>
        [TestVariable("a8776ee6-13bb-4447-8ba8-119a3956ed16")]
        public string NewUnit
        {
            get { return _NewUnit; }
            set { _NewUnit = value; }
        }

        string _ReasonForAcknowledge;

        /// <summary>
        /// Gets or sets the value of variable ReasonForAcknowledge.
        /// </summary>
        [TestVariable("345da654-e8aa-4d46-952e-355cf2567e7c")]
        public string ReasonForAcknowledge
        {
            get { return _ReasonForAcknowledge; }
            set { _ReasonForAcknowledge = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Medication.
        /// </summary>
        [TestVariable("52b6827b-4200-457f-8aad-91aaa2b7444c")]
        public string Medication
        {
            get { return repo.Medication; }
            set { repo.Medication = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable ExistingMedication.
        /// </summary>
        [TestVariable("dad07a18-c8e6-45ad-a63c-78982b425b53")]
        public string ExistingMedication
        {
            get { return repo.ExistingMedication; }
            set { repo.ExistingMedication = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Route.
        /// </summary>
        [TestVariable("9b76b027-9a0f-4ba2-b7d6-4c8d2ac7d242")]
        public string Route
        {
            get { return repo.Route; }
            set { repo.Route = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.Modalities.AddModalityWindow.NewLine' at Center.", repo.MainWindow.Modalities.AddModalityWindow.NewLineInfo, new RecordItemIndex(0));
            repo.MainWindow.Modalities.AddModalityWindow.NewLine.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.Modalities.AddModalityWindow.Other.MedicationOther' at Center.", repo.MainWindow.Modalities.AddModalityWindow.Other.MedicationOtherInfo, new RecordItemIndex(1));
            repo.MainWindow.Modalities.AddModalityWindow.Other.MedicationOther.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ListItems.MedicationListItem' at Center.", repo.ListItems.MedicationListItemInfo, new RecordItemIndex(2));
            repo.ListItems.MedicationListItem.Click();
            Delay.Milliseconds(200);
            
            SAFERSleepAPCollection.AcknowledgeAllergy(ReasonForAcknowledge, repo.MainWindow.Modalities.AllergyChecking.AcknowledgedButtonOtherInfo, repo.MainWindow.Modalities.ReasonForAcknowledgeAllergy.SaveInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.Modalities.AddModalityWindow.Other.Route' at Center.", repo.MainWindow.Modalities.AddModalityWindow.Other.RouteInfo, new RecordItemIndex(4));
            repo.MainWindow.Modalities.AddModalityWindow.Other.Route.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Route'.", new RecordItemIndex(5));
            Keyboard.Press(Route);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Enter' Press.", new RecordItemIndex(6));
            Keyboard.Press(System.Windows.Forms.Keys.Return, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.Modalities.AddModalityWindow.Other.TotalSinceLastReview' at Center.", repo.MainWindow.Modalities.AddModalityWindow.Other.TotalSinceLastReviewInfo, new RecordItemIndex(7));
            repo.MainWindow.Modalities.AddModalityWindow.Other.TotalSinceLastReview.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$NewTotalSinceLastReview'.", new RecordItemIndex(8));
            Keyboard.Press(NewTotalSinceLastReview);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.Modalities.AddModalityWindow.Other.Unit' at Center.", repo.MainWindow.Modalities.AddModalityWindow.Other.UnitInfo, new RecordItemIndex(9));
            repo.MainWindow.Modalities.AddModalityWindow.Other.Unit.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$NewUnit'.", new RecordItemIndex(10));
            Keyboard.Press(NewUnit);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Enter' Press.", new RecordItemIndex(11));
            Keyboard.Press(System.Windows.Forms.Keys.Return, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.MainButtons.OnPoppup.SaveDialogue' at Center.", repo.MainWindow.MainButtons.OnPoppup.SaveDialogueInfo, new RecordItemIndex(12));
            repo.MainWindow.MainButtons.OnPoppup.SaveDialogue.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'MainWindow.Modalities.SimpleModalities.AddedOtherModality'.", repo.MainWindow.Modalities.SimpleModalities.AddedOtherModalityInfo, new RecordItemIndex(13));
            Validate.Exists(repo.MainWindow.Modalities.SimpleModalities.AddedOtherModalityInfo);
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
