///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SAFERSleep_AP.Recordings.SearchPatient
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The SeachByNHI_ViewList recording.
    /// </summary>
    [TestModule("2e6236c6-46ed-4b22-b8bd-b04a1e3d50f8", ModuleType.Recording, 1)]
    public partial class SeachByNHI_ViewList : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SAFERSleep_AP.SAFERSleep_APRepository repository.
        /// </summary>
        public static SAFERSleep_AP.SAFERSleep_APRepository repo = SAFERSleep_AP.SAFERSleep_APRepository.Instance;

        static SeachByNHI_ViewList instance = new SeachByNHI_ViewList();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public SeachByNHI_ViewList()
        {
            NHI = "ETT1000";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static SeachByNHI_ViewList Instance
        {
            get { return instance; }
        }

#region Variables

        /// <summary>
        /// Gets or sets the value of variable NHI.
        /// </summary>
        [TestVariable("dafc834c-e6ef-47fa-9f7f-758b57220fb7")]
        public string NHI
        {
            get { return repo.NHI; }
            set { repo.NHI = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            // Select View Round
            Report.Log(ReportLevel.Info, "Mouse", "Select View Round\r\nMouse Left Click item 'MainWindow.SearchPatientScreen.ReviewRound' at Center.", repo.MainWindow.SearchPatientScreen.ReviewRoundInfo, new RecordItemIndex(0));
            repo.MainWindow.SearchPatientScreen.ReviewRound.Click();
            Delay.Milliseconds(200);
            
            // Select "All Active"
            SAFERSleepAPCollection.SelectReviewRound(ValueConverter.ArgumentFromString<int>("ReviewRound", "0"), repo.MainWindow.SearchPatientScreen.ReviewRoundInfo);
            Delay.Milliseconds(0);
            
            AcutePainCollection.Clear_TextBox(repo.MainWindow.SearchPatientScreen.NHIInfo, "Text");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$NHI'.", new RecordItemIndex(3));
            Keyboard.Press(NHI);
            Delay.Milliseconds(100);
            
            // Click on Search
            //Report.Log(ReportLevel.Info, "Mouse", "Click on Search\r\nMouse Left Click item 'MainWindow.SearchPatientScreen.Search' at Center.", repo.MainWindow.SearchPatientScreen.SearchInfo, new RecordItemIndex(4));
            //repo.MainWindow.SearchPatientScreen.Search.Click();
            //Delay.Milliseconds(200);
            
            // Ward View OFF
            Report.Log(ReportLevel.Info, "Mouse", "Ward View OFF\r\nMouse Left Click item 'MainWindow.SearchPatientScreen.WardView' at Center.", repo.MainWindow.SearchPatientScreen.WardViewInfo, new RecordItemIndex(5));
            repo.MainWindow.SearchPatientScreen.WardView.Click();
            Delay.Milliseconds(200);
            
            // Verify Search result
            Report.Log(ReportLevel.Info, "Validation", "Verify Search result\r\nValidating Exists on item 'MainWindow.SearchPatientScreen.PatientNHISearch'.", repo.MainWindow.SearchPatientScreen.PatientNHISearchInfo, new RecordItemIndex(6));
            Validate.Exists(repo.MainWindow.SearchPatientScreen.PatientNHISearchInfo);
            Delay.Milliseconds(0);
            
            // Click on Patient record
            Report.Log(ReportLevel.Info, "Mouse", "Click on Patient record\r\nMouse Left Click item 'MainWindow.SearchPatientScreen.PatientNHISearch' at Center.", repo.MainWindow.SearchPatientScreen.PatientNHISearchInfo, new RecordItemIndex(7));
            repo.MainWindow.SearchPatientScreen.PatientNHISearch.Click();
            Delay.Milliseconds(200);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
