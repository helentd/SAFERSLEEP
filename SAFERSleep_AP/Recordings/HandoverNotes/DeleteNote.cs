///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SAFERSleep_AP.Recordings.HandoverNotes
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The DeleteNote recording.
    /// </summary>
    [TestModule("870cb60b-3532-4ecd-8309-66f1ae5b29a0", ModuleType.Recording, 1)]
    public partial class DeleteNote : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SAFERSleep_AP.SAFERSleep_APRepository repository.
        /// </summary>
        public static SAFERSleep_AP.SAFERSleep_APRepository repo = SAFERSleep_AP.SAFERSleep_APRepository.Instance;

        static DeleteNote instance = new DeleteNote();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public DeleteNote()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static DeleteNote Instance
        {
            get { return instance; }
        }

#region Variables

        /// <summary>
        /// Gets or sets the value of variable NoteDetail.
        /// </summary>
        [TestVariable("8eeda0d1-a56e-486e-8ef4-690dcdaca8ad")]
        public string NoteDetail
        {
            get { return repo.NoteDetail; }
            set { repo.NoteDetail = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            // Click on "HideDeleted" again
            //Report.Log(ReportLevel.Info, "Mouse", "Click on \"HideDeleted\" again\r\nMouse Left Click item 'MainWindow.HandoverNotes.NotesSection.HideDeleted' at Center.", repo.MainWindow.HandoverNotes.NotesSection.HideDeletedInfo, new RecordItemIndex(0));
            //repo.MainWindow.HandoverNotes.NotesSection.HideDeleted.Click();
            //Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.HandoverNotes.NotesSection.AddedNote' at Center.", repo.MainWindow.HandoverNotes.NotesSection.AddedNoteInfo, new RecordItemIndex(1));
            repo.MainWindow.HandoverNotes.NotesSection.AddedNote.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(2));
            Delay.Duration(3000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.MainButtons.OnPoppup.DeleteNote' at Center.", repo.MainWindow.MainButtons.OnPoppup.DeleteNoteInfo, new RecordItemIndex(3));
            repo.MainWindow.MainButtons.OnPoppup.DeleteNote.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWindow.Confirmation.ButtonYes' at Center.", repo.MainWindow.Confirmation.ButtonYesInfo, new RecordItemIndex(4));
            repo.MainWindow.Confirmation.ButtonYes.Click();
            Delay.Milliseconds(200);
            
            // Verify Note is not displayed on the list
            Report.Log(ReportLevel.Info, "Validation", "Verify Note is not displayed on the list\r\nValidating AttributeEqual (Visible='False') on item 'MainWindow.HandoverNotes.NotesSection.AddedNote'.", repo.MainWindow.HandoverNotes.NotesSection.AddedNoteInfo, new RecordItemIndex(5));
            Validate.AttributeEqual(repo.MainWindow.HandoverNotes.NotesSection.AddedNoteInfo, "Visible", "False");
            Delay.Milliseconds(0);
            
            // Click on "ShowDeleted" button
            Report.Log(ReportLevel.Info, "Mouse", "Click on \"ShowDeleted\" button\r\nMouse Left Click item 'MainWindow.HandoverNotes.NotesSection.ShowDeleted' at Center.", repo.MainWindow.HandoverNotes.NotesSection.ShowDeletedInfo, new RecordItemIndex(6));
            repo.MainWindow.HandoverNotes.NotesSection.ShowDeleted.Click();
            Delay.Milliseconds(200);
            
            // Check Note is displayed on the deleted list
            Report.Log(ReportLevel.Info, "Validation", "Check Note is displayed on the deleted list\r\nValidating AttributeEqual (Visible='True') on item 'MainWindow.HandoverNotes.NotesSection.AddedNote'.", repo.MainWindow.HandoverNotes.NotesSection.AddedNoteInfo, new RecordItemIndex(7));
            Validate.AttributeEqual(repo.MainWindow.HandoverNotes.NotesSection.AddedNoteInfo, "Visible", "True");
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
