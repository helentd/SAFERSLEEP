///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SAFERSleep_AP.Recordings.HandoverNotes
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The AddNote recording.
    /// </summary>
    [TestModule("f6851ff9-2b31-40e6-bb29-3c20bed642f1", ModuleType.Recording, 1)]
    public partial class AddNote : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SAFERSleep_AP.SAFERSleep_APRepository repository.
        /// </summary>
        public static SAFERSleep_AP.SAFERSleep_APRepository repo = SAFERSleep_AP.SAFERSleep_APRepository.Instance;

        static AddNote instance = new AddNote();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public AddNote()
        {
            NoteDetail = "This is a test Note detail";
            IsAlert = "Yes";
            DontPrint = "Yes";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static AddNote Instance
        {
            get { return instance; }
        }

#region Variables

        string _IsAlert;

        /// <summary>
        /// Gets or sets the value of variable IsAlert.
        /// </summary>
        [TestVariable("74de605c-50c0-4c51-bcbd-ec2885a31e2d")]
        public string IsAlert
        {
            get { return _IsAlert; }
            set { _IsAlert = value; }
        }

        string _DontPrint;

        /// <summary>
        /// Gets or sets the value of variable DontPrint.
        /// </summary>
        [TestVariable("142442d6-047a-4d48-82bb-c30d4b1b6a8b")]
        public string DontPrint
        {
            get { return _DontPrint; }
            set { _DontPrint = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable NoteDetail.
        /// </summary>
        [TestVariable("ffe179ea-17d7-4fd5-a587-e54ba59718f5")]
        public string NoteDetail
        {
            get { return repo.NoteDetail; }
            set { repo.NoteDetail = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            // Click on Add Note button
            Report.Log(ReportLevel.Info, "Mouse", "Click on Add Note button\r\nMouse Left Click item 'MainWindow.HandoverNotes.NotesSection.AddNote' at Center.", repo.MainWindow.HandoverNotes.NotesSection.AddNoteInfo, new RecordItemIndex(0));
            repo.MainWindow.HandoverNotes.NotesSection.AddNote.Click();
            Delay.Milliseconds(200);
            
            // Enter Note detail
            Report.Log(ReportLevel.Info, "Mouse", "Enter Note detail\r\nMouse Left Click item 'MainWindow.HandoverNotes.AddNoteWindow.NoteDetail' at Center.", repo.MainWindow.HandoverNotes.AddNoteWindow.NoteDetailInfo, new RecordItemIndex(1));
            repo.MainWindow.HandoverNotes.AddNoteWindow.NoteDetail.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$NoteDetail'.", new RecordItemIndex(2));
            Keyboard.Press(NoteDetail);
            Delay.Milliseconds(100);
            
            // Select Alert and DontPrint option
            SelectNoteOption(IsAlert, DontPrint);
            Delay.Milliseconds(0);
            
            // save note
            Report.Log(ReportLevel.Info, "Mouse", "save note\r\nMouse Left Click item 'MainWindow.MainButtons.OnPoppup.SaveDialogue' at Center.", repo.MainWindow.MainButtons.OnPoppup.SaveDialogueInfo, new RecordItemIndex(4));
            repo.MainWindow.MainButtons.OnPoppup.SaveDialogue.Click();
            Delay.Milliseconds(200);
            
            // Verify that the note is added successfully
            Report.Log(ReportLevel.Info, "Validation", "Verify that the note is added successfully\r\nValidating Exists on item 'MainWindow.HandoverNotes.NotesSection.AddedNote'.", repo.MainWindow.HandoverNotes.NotesSection.AddedNoteInfo, new RecordItemIndex(5));
            Validate.Exists(repo.MainWindow.HandoverNotes.NotesSection.AddedNoteInfo);
            Delay.Milliseconds(0);
            
            //VerifyNoteIsAddedSuccessful(IsAlert, DontPrint);
            //Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
