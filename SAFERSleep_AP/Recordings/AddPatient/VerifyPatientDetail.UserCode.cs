///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace SAFERSleep_AP.Recordings.AddPatient
{
    public partial class VerifyPatientDetail
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }
		
        public void ValidatePatientAge(string DOB)
        {
        	System.DateTime Date_Today = System.DateTime.Now;
        	System.DateTime parsedDOB = System.DateTime.Parse(DOB); //convert DOB to DateTime data type
        	double days = (Date_Today - parsedDOB).TotalDays;
        	int years = ((int)days) / 365;
        	repo.Age = years.ToString();
        	
        	Ranorex.Report.Info("Validate Patient Age");
        	Validate.Exists(repo.MainWindow.PainReviewHeader.PatientDetails.Age);
        }
        
        public void ValidateGender(string Gender)
        {
        	repo.Gender = Gender[0].ToString().ToUpper();
        	Ranorex.Report.Info("Validate Patient Gender");
        	Validate.Exists(repo.MainWindow.PainReviewHeader.PatientDetails.Gender);
        }
        
        public void ValidateBMI(double Weight, double Height)
        {      	
        	double numBMI = (Weight / (Math.Pow((Height/100),2)));
        	string stgBMI = string.Format("{0:N1}", Convert.ToDecimal(numBMI));        	
        	repo.BMI = stgBMI;
        	Ranorex.Report.Info("Validate Patient BMI");
        	Validate.Exists(repo.MainWindow.PainReviewHeader.PatientDetails.BMI);
        }
        
        public void ValidateWeight(double Weight)
        {
        	string stgWeight;
        	if (Weight < 10)
        		stgWeight = string.Format("{0:N2}", Convert.ToDecimal(Weight));
        	else
        		stgWeight = string.Format("{0:N1}", Convert.ToDecimal(Weight));
        	repo.Weight = stgWeight;
        	Ranorex.Report.Info("Validate Patient Weight");
        	Validate.Exists(repo.MainWindow.PainReviewHeader.PatientDetails.Weight);
        }
        
        public void ValidateReferralDate(string RefDate) // e.g. "Now" or "01 Mar 2019"
        {   
        	string unit;
        	
        	if (RefDate == "Now")
        	{
        		String strDate_Today = System.DateTime.Now.ToString("dd MMM yyy");
        		repo.ReferralDate = strDate_Today;
        		unit = " hour";
        		repo.RefDays = "1"+unit;
        	}
        	else
        	{
        		repo.ReferralDate = RefDate;
        		System.DateTime Date_Today = System.DateTime.Now;
        		System.DateTime parsedRefDay = System.DateTime.Parse(RefDate);
        		double duration = (Date_Today - parsedRefDay).TotalDays;
        		int days = (int) duration;
        		if (days == 1)
        			unit = " day";
        		else
        			unit = " days";
        		repo.RefDays = days.ToString() + unit;
        	}
        	
        	Ranorex.Report.Info("Validate Patient Referral Date");
        	Validate.Exists(repo.MainWindow.PainReviewHeader.PatientDetails.ReferralDate);
        	
        	Ranorex.Report.Info("Validate Duration since referred");
        	Validate.Exists(repo.MainWindow.PainReviewHeader.PatientDetails.ReferralDuration);
        }
    }
}
