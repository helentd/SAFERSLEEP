///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SAFERSleep_AP.Recordings.AddPatient
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The AddProcedureDetail recording.
    /// </summary>
    [TestModule("21655b84-f6b3-4b60-b527-b5714e774180", ModuleType.Recording, 1)]
    public partial class AddProcedureDetail : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SAFERSleep_AP.SAFERSleep_APRepository repository.
        /// </summary>
        public static SAFERSleep_AP.SAFERSleep_APRepository repo = SAFERSleep_AP.SAFERSleep_APRepository.Instance;

        static AddProcedureDetail instance = new AddProcedureDetail();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public AddProcedureDetail()
        {
            ProcedureName = "TestProcedure";
            Specialty = "Obstetrics";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static AddProcedureDetail Instance
        {
            get { return instance; }
        }

#region Variables

        string _ProcedureName;

        /// <summary>
        /// Gets or sets the value of variable ProcedureName.
        /// </summary>
        [TestVariable("047f3a18-3bad-4fb1-9b12-756c7fe1f151")]
        public string ProcedureName
        {
            get { return _ProcedureName; }
            set { _ProcedureName = value; }
        }

        string _Specialty;

        /// <summary>
        /// Gets or sets the value of variable Specialty.
        /// </summary>
        [TestVariable("aacdec55-b83f-4d35-85fb-4bb49ba09554")]
        public string Specialty
        {
            get { return _Specialty; }
            set { _Specialty = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            // Enter Procedure name
            Report.Log(ReportLevel.Info, "Mouse", "Enter Procedure name\r\nMouse Left Click item 'MainWindow.AddingPatient.AddProcedure.ProcedureName' at Center.", repo.MainWindow.AddingPatient.AddProcedure.ProcedureNameInfo, new RecordItemIndex(0));
            repo.MainWindow.AddingPatient.AddProcedure.ProcedureName.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$ProcedureName'.", new RecordItemIndex(1));
            Keyboard.Press(ProcedureName);
            
            // Enter Specialty
            Report.Log(ReportLevel.Info, "Mouse", "Enter Specialty\r\nMouse Left Click item 'MainWindow.AddingPatient.AddProcedure.SurgicalSpecialty' at Center.", repo.MainWindow.AddingPatient.AddProcedure.SurgicalSpecialtyInfo, new RecordItemIndex(2));
            repo.MainWindow.AddingPatient.AddProcedure.SurgicalSpecialty.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Specialty'.", new RecordItemIndex(3));
            Keyboard.Press(Specialty);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Enter' Press.", new RecordItemIndex(4));
            Keyboard.Press(System.Windows.Forms.Keys.Return, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            // Click Save button
            Report.Log(ReportLevel.Info, "Mouse", "Click Save button\r\nMouse Left Click item 'MainWindow.AddingPatient.Save' at Center.", repo.MainWindow.AddingPatient.SaveInfo, new RecordItemIndex(5));
            repo.MainWindow.AddingPatient.Save.Click();
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
