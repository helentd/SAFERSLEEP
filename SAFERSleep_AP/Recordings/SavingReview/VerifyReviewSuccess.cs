///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SAFERSleep_AP.Recordings.SavingReview
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The VerifyReviewSuccess recording.
    /// </summary>
    [TestModule("48d76b41-7f39-4ab0-93d4-78ce0192cb2c", ModuleType.Recording, 1)]
    public partial class VerifyReviewSuccess : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SAFERSleep_AP.SAFERSleep_APRepository repository.
        /// </summary>
        public static SAFERSleep_AP.SAFERSleep_APRepository repo = SAFERSleep_AP.SAFERSleep_APRepository.Instance;

        static VerifyReviewSuccess instance = new VerifyReviewSuccess();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public VerifyReviewSuccess()
        {
            NHI = "ACP2031";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static VerifyReviewSuccess Instance
        {
            get { return instance; }
        }

#region Variables

        /// <summary>
        /// Gets or sets the value of variable NHI.
        /// </summary>
        [TestVariable("290f79ae-f146-40df-a79a-185d6c05a6c5")]
        public string NHI
        {
            get { return repo.NHI; }
            set { repo.NHI = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            // Verify the search screen  appear  after saving review
            Report.Log(ReportLevel.Info, "Validation", "Verify the search screen  appear  after saving review\r\nValidating Exists on item 'MainWindow.SearchPatientScreen.LogoAcutePain'.", repo.MainWindow.SearchPatientScreen.LogoAcutePainInfo, new RecordItemIndex(0));
            Validate.Exists(repo.MainWindow.SearchPatientScreen.LogoAcutePainInfo);
            Delay.Milliseconds(0);
            
            // Select Round Team
            Report.Log(ReportLevel.Info, "Mouse", "Select Round Team\r\nMouse Left Click item 'MainWindow.SearchPatientScreen.ReviewRound' at Center.", repo.MainWindow.SearchPatientScreen.ReviewRoundInfo, new RecordItemIndex(1));
            repo.MainWindow.SearchPatientScreen.ReviewRound.Click();
            Delay.Milliseconds(200);
            
            // Select "All Acitve" value
            SAFERSleepAPCollection.SelectReviewRound(ValueConverter.ArgumentFromString<int>("ReviewRound", "0"), repo.MainWindow.SearchPatientScreen.ReviewRoundInfo);
            Delay.Milliseconds(0);
            
            // Enter NHI
            Report.Log(ReportLevel.Info, "Mouse", "Enter NHI\r\nMouse Left Click item 'MainWindow.SearchPatientScreen.NHI' at Center.", repo.MainWindow.SearchPatientScreen.NHIInfo, new RecordItemIndex(3));
            repo.MainWindow.SearchPatientScreen.NHI.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$NHI' with focus on 'MainWindow.SearchPatientScreen.NHI'.", repo.MainWindow.SearchPatientScreen.NHIInfo, new RecordItemIndex(4));
            repo.MainWindow.SearchPatientScreen.NHI.PressKeys(NHI);
            Delay.Milliseconds(100);
            
            // Ward View OFF
            Report.Log(ReportLevel.Info, "Mouse", "Ward View OFF\r\nMouse Left Click item 'MainWindow.SearchPatientScreen.WardView' at Center.", repo.MainWindow.SearchPatientScreen.WardViewInfo, new RecordItemIndex(5));
            repo.MainWindow.SearchPatientScreen.WardView.Click();
            Delay.Milliseconds(200);
            
            // Click on Search
            //Report.Log(ReportLevel.Info, "Mouse", "Click on Search\r\nMouse Left Click item 'MainWindow.SearchPatientScreen.Search' at Center.", repo.MainWindow.SearchPatientScreen.SearchInfo, new RecordItemIndex(6));
            //repo.MainWindow.SearchPatientScreen.Search.Click();
            //Delay.Milliseconds(200);
            
            // Verify that the  Patient is returned
            Report.Log(ReportLevel.Info, "Validation", "Verify that the  Patient is returned\r\nValidating Exists on item 'MainWindow.SearchPatientScreen.PatientNHISearch'.", repo.MainWindow.SearchPatientScreen.PatientNHISearchInfo, new RecordItemIndex(7));
            Validate.Exists(repo.MainWindow.SearchPatientScreen.PatientNHISearchInfo);
            Delay.Milliseconds(0);
            
            // Verify the backgound color is green which shows the review is successful
            Report.Log(ReportLevel.Info, "Validation", "Verify the backgound color is green which shows the review is successful\r\nValidating AttributeEqual (BackgroundColor='#00FFFFFF') on item 'MainWindow.SearchPatientScreen.PatientNHISearch'.", repo.MainWindow.SearchPatientScreen.PatientNHISearchInfo, new RecordItemIndex(8));
            Validate.AttributeEqual(repo.MainWindow.SearchPatientScreen.PatientNHISearchInfo, "BackgroundColor", "#00FFFFFF");
            Delay.Milliseconds(0);
            
            // Ward View ON
            Report.Log(ReportLevel.Info, "Mouse", "Ward View ON\r\nMouse Left Click item 'MainWindow.SearchPatientScreen.WardView' at Center.", repo.MainWindow.SearchPatientScreen.WardViewInfo, new RecordItemIndex(9));
            repo.MainWindow.SearchPatientScreen.WardView.Click();
            Delay.Milliseconds(200);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
