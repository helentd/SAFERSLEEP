///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SAFERsleep_MedRec.Recordings.AddPatient
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The FillinPatientDetails recording.
    /// </summary>
    [TestModule("e501d8f3-a75d-4d8b-9f31-5099541b3f25", ModuleType.Recording, 1)]
    public partial class FillinPatientDetails : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SAFERsleep_MedRec.SAFERsleep_MedRecRepository repository.
        /// </summary>
        public static SAFERsleep_MedRec.SAFERsleep_MedRecRepository repo = SAFERsleep_MedRec.SAFERsleep_MedRecRepository.Instance;

        static FillinPatientDetails instance = new FillinPatientDetails();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public FillinPatientDetails()
        {
            NHI = "MNF3676";
            LastName = "Test";
            FirstName = "Patient";
            DOB = "09-Jun-2010";
            Procedure = "Test Procedure";
            ProcedureDate = "06-Aug-2018";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static FillinPatientDetails Instance
        {
            get { return instance; }
        }

#region Variables

        string _LastName;

        /// <summary>
        /// Gets or sets the value of variable LastName.
        /// </summary>
        [TestVariable("8166c305-51a7-4c50-95b5-892037d58e75")]
        public string LastName
        {
            get { return _LastName; }
            set { _LastName = value; }
        }

        string _FirstName;

        /// <summary>
        /// Gets or sets the value of variable FirstName.
        /// </summary>
        [TestVariable("80a201b0-ef64-46b3-a191-81ac1a3db8f5")]
        public string FirstName
        {
            get { return _FirstName; }
            set { _FirstName = value; }
        }

        string _DOB;

        /// <summary>
        /// Gets or sets the value of variable DOB.
        /// </summary>
        [TestVariable("2c3e3899-1dd3-4c79-8da1-089160496d32")]
        public string DOB
        {
            get { return _DOB; }
            set { _DOB = value; }
        }

        string _ProcedureDate;

        /// <summary>
        /// Gets or sets the value of variable ProcedureDate.
        /// </summary>
        [TestVariable("39d9d991-447b-4832-8fb0-5cb4a9f234fa")]
        public string ProcedureDate
        {
            get { return _ProcedureDate; }
            set { _ProcedureDate = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable ListItem.
        /// </summary>
        [TestVariable("4d5c41a9-3c68-4ec9-8255-7cf1b033829e")]
        public string ListItem
        {
            get { return repo.ListItem; }
            set { repo.ListItem = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable ListItem_2.
        /// </summary>
        [TestVariable("33a108c7-070b-4b73-bc16-439f04193a06")]
        public string ListItem_2
        {
            get { return repo.ListItem_2; }
            set { repo.ListItem_2 = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Priority.
        /// </summary>
        [TestVariable("cf669a8b-11a5-404e-aa0a-d54875911a26")]
        public string Priority
        {
            get { return repo.Priority; }
            set { repo.Priority = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable NHI.
        /// </summary>
        [TestVariable("53668a13-f732-47fd-a57b-97d337fb04ce")]
        public string NHI
        {
            get { return repo.NHI; }
            set { repo.NHI = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Procedure.
        /// </summary>
        [TestVariable("65f99214-3e3c-4a92-a60f-cc5677ddee35")]
        public string Procedure
        {
            get { return repo.Procedure; }
            set { repo.Procedure = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MedRecWindow.MedRec.AddPatient.NHI' at Center.", repo.MedRecWindow.MedRec.AddPatient.NHIInfo, new RecordItemIndex(0));
            repo.MedRecWindow.MedRec.AddPatient.NHI.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$NHI'.", new RecordItemIndex(1));
            Keyboard.Press(NHI);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MedRecWindow.MedRec.AddPatient.LastName' at Center.", repo.MedRecWindow.MedRec.AddPatient.LastNameInfo, new RecordItemIndex(2));
            repo.MedRecWindow.MedRec.AddPatient.LastName.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$LastName'.", new RecordItemIndex(3));
            Keyboard.Press(LastName);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MedRecWindow.MedRec.AddPatient.FirstName' at Center.", repo.MedRecWindow.MedRec.AddPatient.FirstNameInfo, new RecordItemIndex(4));
            repo.MedRecWindow.MedRec.AddPatient.FirstName.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$FirstName'.", new RecordItemIndex(5));
            Keyboard.Press(FirstName);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MedRecWindow.MedRec.AddPatient.DOB' at Center.", repo.MedRecWindow.MedRec.AddPatient.DOBInfo, new RecordItemIndex(6));
            repo.MedRecWindow.MedRec.AddPatient.DOB.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$DOB'.", new RecordItemIndex(7));
            Keyboard.Press(DOB);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MedRecWindow.MedRec.AddPatient.Gender' at Center.", repo.MedRecWindow.MedRec.AddPatient.GenderInfo, new RecordItemIndex(8));
            repo.MedRecWindow.MedRec.AddPatient.Gender.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Dropdown.ListItem' at Center.", repo.Dropdown.ListItemInfo, new RecordItemIndex(9));
            repo.Dropdown.ListItem.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MedRecWindow.MedRec.AddPatient.Ward' at Center.", repo.MedRecWindow.MedRec.AddPatient.WardInfo, new RecordItemIndex(10));
            repo.MedRecWindow.MedRec.AddPatient.Ward.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Dropdown.ListItem_2' at Center.", repo.Dropdown.ListItem_2Info, new RecordItemIndex(11));
            repo.Dropdown.ListItem_2.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MedRecWindow.MedRec.AddPatient.Procedure' at Center.", repo.MedRecWindow.MedRec.AddPatient.ProcedureInfo, new RecordItemIndex(12));
            repo.MedRecWindow.MedRec.AddPatient.Procedure.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Procedure'.", new RecordItemIndex(13));
            Keyboard.Press(Procedure);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MedRecWindow.MedRec.AddPatient.ProcedureDate' at Center.", repo.MedRecWindow.MedRec.AddPatient.ProcedureDateInfo, new RecordItemIndex(14));
            repo.MedRecWindow.MedRec.AddPatient.ProcedureDate.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$ProcedureDate'.", new RecordItemIndex(15));
            Keyboard.Press(ProcedureDate);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MedRecWindow.MedRec.AddPatient.Priority' at Center.", repo.MedRecWindow.MedRec.AddPatient.PriorityInfo, new RecordItemIndex(16));
            repo.MedRecWindow.MedRec.AddPatient.Priority.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MedRecWindow.MedRec.Save' at Center.", repo.MedRecWindow.MedRec.SaveInfo, new RecordItemIndex(17));
            repo.MedRecWindow.MedRec.Save.Click();
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
