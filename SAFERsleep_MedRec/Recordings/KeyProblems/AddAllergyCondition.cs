///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SAFERsleep_MedRec.Recordings.KeyProblems
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The AddAllergyCondition recording.
    /// </summary>
    [TestModule("267c0eaa-426f-4df6-a840-71fb879d6940", ModuleType.Recording, 1)]
    public partial class AddAllergyCondition : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SAFERsleep_MedRec.SAFERsleep_MedRecRepository repository.
        /// </summary>
        public static SAFERsleep_MedRec.SAFERsleep_MedRecRepository repo = SAFERsleep_MedRec.SAFERsleep_MedRecRepository.Instance;

        static AddAllergyCondition instance = new AddAllergyCondition();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public AddAllergyCondition()
        {
            DrugClass = "Amiloride";
            AllergyDetails = "this is a test";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static AddAllergyCondition Instance
        {
            get { return instance; }
        }

#region Variables

        string _DrugClass;

        /// <summary>
        /// Gets or sets the value of variable DrugClass.
        /// </summary>
        [TestVariable("222146ca-f7b0-4511-835d-d9dcf0590a4a")]
        public string DrugClass
        {
            get { return _DrugClass; }
            set { _DrugClass = value; }
        }

        string _AllergyDetails;

        /// <summary>
        /// Gets or sets the value of variable AllergyDetails.
        /// </summary>
        [TestVariable("c3bfd8d9-889b-4988-812e-9c9178b36d11")]
        public string AllergyDetails
        {
            get { return _AllergyDetails; }
            set { _AllergyDetails = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable ListItem.
        /// </summary>
        [TestVariable("4d5c41a9-3c68-4ec9-8255-7cf1b033829e")]
        public string ListItem
        {
            get { return repo.ListItem; }
            set { repo.ListItem = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MedRecWindow.MedRec.KeyProblems.AddAllergyCondition' at Center.", repo.MedRecWindow.MedRec.KeyProblems.AddAllergyConditionInfo, new RecordItemIndex(0));
            repo.MedRecWindow.MedRec.KeyProblems.AddAllergyCondition.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MedRecWindow.AddAllergy.DrugClass' at Center.", repo.MedRecWindow.AddAllergy.DrugClassInfo, new RecordItemIndex(1));
            repo.MedRecWindow.AddAllergy.DrugClass.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$DrugClass'.", new RecordItemIndex(2));
            Keyboard.Press(DrugClass);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MedRecWindow.AddAllergy.WarningType' at Center.", repo.MedRecWindow.AddAllergy.WarningTypeInfo, new RecordItemIndex(3));
            repo.MedRecWindow.AddAllergy.WarningType.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Dropdown.ListItem' at Center.", repo.Dropdown.ListItemInfo, new RecordItemIndex(4));
            repo.Dropdown.ListItem.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MedRecWindow.AddAllergy.AllergyDetails' at Center.", repo.MedRecWindow.AddAllergy.AllergyDetailsInfo, new RecordItemIndex(5));
            repo.MedRecWindow.AddAllergy.AllergyDetails.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$AllergyDetails'.", new RecordItemIndex(6));
            Keyboard.Press(AllergyDetails);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MedRecWindow.AddAllergy.Save' at Center.", repo.MedRecWindow.AddAllergy.SaveInfo, new RecordItemIndex(7));
            repo.MedRecWindow.AddAllergy.Save.Click();
            Delay.Milliseconds(200);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
